<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans.xsd 
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context.xsd">
	<bean id="queries" class="java.util.HashMap">
		<constructor-arg>
			<map>
				<entry key="find_by_tan_asssesmentYear">
					<value> 
					<![CDATA[
					       SELECT * FROM Transactions.invoice_line_item WHERE deductor_master_tan= :deductorMasterTan AND assessment_year= :assessmentYear AND active=1
				         		AND assessment_month = :assessmentMonth ]]>
					</value>
				</entry>
				<entry key="find_by_deducteename_pan">
					<value>
					<![CDATA[
					       SELECT * FROM Transactions.invoice_line_item WHERE deductee_name=:deducteeName AND pan=:deducteePan;
				          ]]>
					</value>
				</entry>
				<entry key="find_by_year_tan-challanmontj_isresident_active">
					<value>
					<![CDATA[
					       SELECT * FROM Transactions.invoice_line_item WHERE assessment_year=:assessmentYear AND challan_month IN(:challanMonths) AND deductor_master_tan IN(:deductorTan)
					        AND resident=:isForNonResidents AND challan_paid=:challanPaid AND active=1;
				          ]]>
					</value>
				</entry>
				<entry
					key="find_by_year_tan_batchId_mismatch_keyDuplicate_isParent">
					<value>
					<![CDATA[ SELECT * FROM Transactions.invoice_line_item WHERE deductor_master_tan IN(:tan) AND batch_upload_id=:batchId AND mismatch_category = :mismatchType 
					      AND key_duplicate=0 AND (is_parent is null or is_parent =0) AND has_mismatch = 1 AND is_error =0  ]]>
					</value>
				</entry>
				<entry
					key="count_find_by_year_tan_batchId_mismatch_keyDuplicate_isParent">
					<value>
					<![CDATA[ SELECT COUNT(1) FROM Transactions.invoice_line_item WHERE deductor_master_tan IN(:tan) AND batch_upload_id=:batchId AND mismatch_category = :mismatchType 
					      AND key_duplicate=0 AND (is_parent is null or is_parent =0)  AND has_mismatch = 1 AND is_error =0 ]]>
					</value>
				</entry>
				<entry key="invoice_By_ReceiptSerialNo__dBSRCode_ReceiptDate">
					<value>
					<![CDATA[
					      SELECT * FROM Transactions.invoice_line_item WHERE assessment_year=:assessmentYear AND deductor_master_tan=:deductorTan
	                      AND receipt_bsr_code=:bsrCode AND challan_serial_no=:receiptSerailNo AND challan_paid_date=:receiptDate AND 
	    				 active=1 AND resident=:isForNonResidents AND challan_paid=:challanPaid and is_parent =0 
	    				 and (final_tds_amount > 0 OR ldc_certificate_number is not null) and invoice_amount > 0 ;
				          ]]>
					</value>
				</entry>
				<entry key="top_3_invoices_by_serialNo_bsrcode_receiptdate">
					<value>
					<![CDATA[
					      SELECT TOP 3  * FROM Transactions.invoice_line_item WHERE assessment_year=:assessmentYear AND deductor_master_tan=:deductorTan
	                      AND receipt_bsr_code=:bsrCode AND challan_serial_no=:receiptSerailNo AND challan_paid_date=:receiptDate AND 
	    				 active=1 AND resident=:isForNonResidents AND challan_paid=:challanPaid and is_parent =0 and final_tds_amount > 0 and invoice_amount > 0 ;
				          ]]>
					</value>
				</entry>
				<entry
					key="invoice_count_By_ReceiptSerialNo__dBSRCode_ReceiptDate">
					<value>
					<![CDATA[
					      SELECT COUNT(1) FROM Transactions.invoice_line_item WHERE assessment_year=:assessmentYear AND deductor_master_tan=:deductorTan
                AND receipt_bsr_code=:bsrCode AND challan_serial_no=:receiptSerailNo AND challan_paid_date=:receiptDate AND 
				 active=1 AND resident=:residentIndicator AND challan_paid=:challan_paid ;
				          ]]>
					</value>
				</entry>
				<entry key="invoice_count_By_ReceiptSerialNo__challanMonth">
					<value>
					<![CDATA[
					      SELECT COUNT(1) FROM Transactions.invoice_line_item WHERE assessment_year=:assessmentYear AND deductor_master_tan=:deductorTan
							AND challan_month IN(:challanMonths) AND active=1 AND challan_paid=:challanPaid AND resident =:residentIndicator ;
				          ]]>
					</value>
				</entry>

				<entry key="get_All_Invoice_Mismatches">
					<value>
					<![CDATA[
					      SELECT * FROM Transactions.invoice_line_item WHERE assessment_year=:year AND deductor_master_tan=:tan AND 
							has_mismatch=1 AND active=0 AND key_duplicate=0 AND challan_month=:month AND is_parent=0;
				          ]]>
					</value>
				</entry>
				<entry key="get__Invoice_by_id">
					<value>
					<![CDATA[
					      SELECT * FROM Transactions.invoice_line_item WHERE invoice_line_item_id=:id;
				          ]]>
					</value>
				</entry>
				<entry key="find_by_year_tan_id_active">
					<value>
						<![CDATA[ SELECT * FROM Transactions.invoice_line_item WHERE assessment_year= :year AND deductor_master_tan= :tan AND
		      						invoice_line_item_id= :id AND active= :activeFlag ;]]>
					</value>
				</entry>
				<entry key="ao_master_by_certificateNumber">
					<value>
				           <![CDATA[SELECT * FROM Client_Masters.ao_master WHERE 
								deductor_master_tan= :deductorTan and certificate_number = :certificateNumber;
				]]>
					</value>
				</entry>
				<entry key="ao_amount_utilized_previousYear">
					<value>
                            <![CDATA[ SELECT ISNULL(SUM(utilized_amount),0) FROM Transactions.ao_utilization WHERE assessment_year < :assessmentYear and
                            deductor_master_tan = :deductorTan and ao_master_id= :aoMasterId and active = 1; ]]>
					</value>
				</entry>
				<entry key="ao_amount_utilized_currentYear">
					<value>
                            <![CDATA[ SELECT ISNULL(SUM(utilized_amount),0) FROM Transactions.ao_utilization WHERE assessment_year = :assessmentYear and
                            deductor_master_tan= :deductorTan and ao_master_id= :aoMasterId and active=1 and challan_month < 4; ]]>
					</value>
				</entry>
				<entry key="ao_total_opening_amount_by_month">
					<value>
                            <![CDATA[ SELECT ISNULL(SUM(utilized_amount),0) FROM Transactions.ao_utilization WHERE 
                            assessment_year = :assessmentYear and deductor_master_tan= :deductorTan 
                            and ao_master_id= :aoMasterId AND challan_month = :month and active=1; ]]>
					</value>
				</entry>
				<entry key="ao_total_opening_amount_by_month_count">
					<value>
                            <![CDATA[ SELECT count(1) FROM Transactions.ao_utilization WHERE assessment_year = :assessmentYear  
                            and deductor_master_tan= :deductorTan and ao_master_id= :aoMasterId AND challan_month = :month and active=1;
                            ]]>
					</value>
				</entry>
				<entry key="get_ao_adjustment">
					<value>
                            <![CDATA[SELECT ao_utilization_id, assessment_year, assessment_month, deductor_master_tan, 
                            ao_master_ao_applicable_from, ao_master_ao_applicable_to, ao_master_id, ao_master_pan, 
                            ao_master_total_amount, ao_master_utilized_amount, active, consumed_from, created_by, 
                            created_date, modified_by, modified_date, remaining_amount, utilized_amount, challan_month, 
                            invoice_process_date, line_item_id, invoice_shareholder_non_resident_id FROM Transactions.ao_utilization
                             WHERE ao_utilization_assessment_year = :assessmentYear  and deductor_master_tan= :deductorTan 
                            and ao_master_id= :aoMasterId AND challan_month = :month and active=1;
                            ]]>
					</value>
				</entry>
				<entry key="advance_update">
					<value>
                            <![CDATA[UPDATE Transactions.advance
							 SET  action= :action, active= :active, actual_tds_amount= :actualTdsAmount, 
							 amount= :amount, approved_for_challan= :approvedForChallan, 
							 assessment_month= :assessmentMonth, cess_amount= :cessAmount, cess_rate= :cessRate, challan_generated_date= :challanGeneratedDate, 
							 challan_month= :challanMonth, challan_paid= :challanPaid, 
							 company_code= :companyCode, confidence= :confidence, created_by= :createdBy, created_date= :createdDate, 
							 date_at_which_tds_is_deposited= :dateAtWhichTdsIsDeposited, 
							 date_on_which_tds_is_deducted= :dateOnWhichTdsIsDeducted, deductee_code= :deducteeCode, deductee_gstin= :deducteeGstin, 
							 deductee_name= :deducteeName, deductee_pan= :deducteePan, 
							 deductee_tin= :deducteeTin, deductor_gstin= :deductorGstin, deductor_pan= :deductorPan, deductor_tin= :deductorTin, 
							 derived_tds_amount= :derivedTdsAmount, derived_tds_rate= :derivedTdsRate, 
							 derived_tds_section= :derivedTdsSection, document_date= :documentDate, document_number= :documentNumber, document_type= :documentType, 
							 entry_date= :entryDate, excess= :excess, 
							 final_tds_amount= :finalTdsAmount, final_tds_rate= :finalTdsRate, final_tds_section= :finalTdsSection,
							 has_ldc= :hasLdc, hsn_or_sac= :hsnOrSac, interest= :interest, 
							 is_challan_generated= :isChallanGenerated, is_parent= :isParent, is_resident= :isResident, is_utilized= :isUtilized, 
							 key_duplicate= :keyDuplicate, line_item_number= :lineItemNumber, 
							 linking_of_invoice_with_po= :linkingOfInvoiceWithPo, mismatch= :mismatch, mismatch_category= :mismatchCategory, 
							 mismatch_interpretation= :mismatchInterpretation, modified_by= :modifiedBy, 
							 modified_date= :modifiedDate, name_of_the_company_code= :nameOfTheCompanyCode, penalty= :penalty, place_of_supply= :placeOfSupply, 
							 po_date= :poDate, po_number= :poNumber, 
							 processed_from= :processedFrom, reason= :reason, sac_description= :sacDescription, section= :section, sequence_number= :sequenceNumber, 
							 service_description= :serviceDescription, 
							 service_description_gl= :serviceDescriptionGl, service_description_invoice= :serviceDescriptionInvoice, 
							 service_description_po= :serviceDescriptionPo, advance_short= :advanceShort, 
							 source_file_name= :sourceFileName, source_identifiers= :sourceIdentifiers, surcharge= :surcharge, 
							 to_vendor_account_code= :toVendorAccountDescription, to_vendor_account_description= :toVendorAccountDescription, 
							 user_defined_field_1= :userDefinedField1, user_defined_field_2= :userDefinedField2, user_defined_field_3= :userDefinedField3, 
							 withholding_amount= :withholdingAmount, withholding_rate= :withholdingRate, 
							 withholding_section= :withholdingSection, batch_upload_id= :batchUploadId, client_effective_tds_rate = :clientEffectiveTdsRate,
							 ancestor_id =:ancestorId, advance_npid =:advanceNpId, advance_groupid = :advanceGroupid, ldc_certificate_number =:ldcCertificateNumber, 
							 error_reason = :errorReason, is_exempted = :isExempted, client_taxable_amount =:clientTaxableAmount WHERE advance_id = :id;
                            ]]>
					</value>
				</entry>
				<entry key="provision_update">
					<value>
                            <![CDATA[	
	UPDATE Transactions.provision SET 
	batch_upload_id= :batchUploadId, account_code= :accountCode,
	account_description= :accountDescription, action= :actionType, active=
	:active,
	approved_for_challan= :approvedForChallan, assessment_month= :assessmentMonth, cess_amount=
	:cessAmount, cess_rate= :cessRate,
	challan_generated_date= :challanGeneratedDate, challan_month= :challanMonth, challan_paid=
	:challanPaid, client_amount= :clientAmount,
	company_code= :companyCode, confidence= :confidence, created_by= :createdBy,
	created_date= :createdDate,
	date_at_which_tds_is_deposited= :dateAtWhichTdsIsDeposited, date_on_which_tds_is_deducted=
	:dateOnWhichTdsIsDeducted,
	 deductee_code= :deducteeCode, deductee_gstin=
	:deducteeGstin, deductee_name= :deducteeName,
	deductee_pan= :deducteePan, deductee_tin= :deducteeTin, deduction_type=
	:deductionType, deductor_pan= :deductorPan,
	 derived_tds_amount= :derivedTdsAmount, derived_tds_rate=
	:derivedTdsRate, derived_tds_section= :derivedTdsSection, description=
	:description, document_date= :documentDate, document_number=
	:documentNumber, document_type= :documentType, entry_date= :entryDate,
	excess= :excess, final_tds_amount= :finalTdsAmount, final_tds_rate=
	:finalTdsRate, final_tds_section= :finalTdsSection,
	has_ldc= :hasLdc, hsn_or_sacc= :hsnOrSac, hsnsac_description=
	:hsnsacDescription, interest= :interest, invoice_line_hash_code=
	:InvoiceLineHashCode, is_challan_generated= :isChallanGenerated,
	is_parent= :isParent, is_resident= :isResident, is_utilized=
	:isUtilized, key_duplicate= :keyDuplicate, line_item_number=
	:lineItemNumber, linking_invoice_po= :linkingInvoicePo, mismatch=
	:mismatch, mismatch_category= :mismatchCategory,
	mismatch_interpretation= :mismatchInterpretation, modified_by=
	:modifiedBy, modified_date= :modifiedDate, name_of_the_company_code=
	:nameOfTheCompanyCode, penalty= :penalty, place_of_supply=
	:placeOfSupply, po_date= :poDate, po_number= :poNumber, po_type=
	:poType, pos= :pos, processed_from= :processedFrom, provisional_amount=
	:provisionalAmount, rate= :rate, reason= :reason, section= :section,
	section_code= :sectionCode, sequence_number= :sequenceNumber,
	service_description= :serviceDescription, service_description_gl=
	:serviceDescriptionGl, service_description_po= :serviceDescriptionPo,
	provision_short= :provisionShort, source_file_name= :sourceFileName,
	source_identifier= :sourceIdentifier, surcharge= :surcharge,
	user_defined_field_1= :userDefinedField1, user_defined_field_2=
	:userDefinedField2, user_defined_field_3= :userDefinedField3,
	withholding_amount= :withholdingAmount, withholding_rate=
	:withholdingRate, withholding_section= :withholdingSection,
	challan_paid_date= :challanPaidDate, receipt_bsr_code= :receiptBsrCode,
	system_challan_serial_no= :systemChallanSerialNo, challan_serial_no=
	:challanSerialNo, client_effective_tds_rate = :clientEffectiveTdsRate, ancestor_id =:ancestorId, 
	provision_npid =:provisionNpId, provision_groupid = :provisionGroupid, ldc_certificate_number =:ldcCertificateNumber, 
	error_reason = :errorReason, is_exempted = :isExempted WHERE provision_id= :id;
                            ]]>
					</value>
				</entry>
				<entry key="get_adavance_by_year_month_tan">
					<value>
                            <![CDATA[SELECT * FROM Transactions.advance WHERE 
                            assessment_year = :assessmentYear and challan_month= :challanMonth 
                            and deductor_master_tan= :tan and approved_for_challan = :approvedForChallan and challan_paid=0 
                            and (is_parent is null or is_parent =0) and active = 1;
                            ]]>
					</value>
				</entry>
				<entry key="get_adavance_by_year_month_tan_count">
					<value>
                            <![CDATA[SELECT count(1) FROM Transactions.advance WHERE 
                            assessment_year = :assessmentYear and challan_month= :challanMonth 
                            and deductor_master_tan= :tan and approved_for_challan = :approvedForChallan and challan_paid=0 
                            and (is_parent is null or is_parent =0) and active = 1;
                            ]]>
					</value>
				</entry>
				<entry key="get_adavance_by_serialNo_bsrCode_date">
					<value>
                            <![CDATA[SELECT * FROM Transactions.advance WHERE 
                            assessment_year = :assessmentYear 
                            and deductor_master_tan= :deductorTan and receipt_bsr_code = :bsrCode and challan_serial_no= :receiptSerailNo 
                            and challan_paid_date = :receiptDate and active = 1 and is_resident = :resident and challan_paid = :challanPaid 
                            and is_parent =0 and (final_tds_amount > 0 OR ldc_certificate_number is not null) and amount > 0 ;
                            ]]>
					</value>
				</entry>
				<entry key="get_adavance_by_serialNo_bsrCode_date_count">
					<value>
                            <![CDATA[SELECT count(1) FROM Transactions.advance WHERE 
                            assessment_year = :assessmentYear 
                            and deductor_master_tan= :deductorTan and receipt_bsr_code = :bsrCode and challan_serial_no= :receiptSerailNo 
                            and challan_paid_date = :receiptDate and active = 1 and is_resident = :resident and challan_paid = :challanPaid;
                            ]]>
					</value>
				</entry>
				<entry key="get_adavance_total_by_serialNo">
					<value>
                            <![CDATA[SELECT sum(final_tds_amount) FROM Transactions.advance WHERE 
                            assessment_year = :assessmentYear 
                            and deductor_master_tan= :tan and challan_month = :assessmentMonth 
                            and active = 1 and (is_parent is null or is_parent =0) and challan_paid=1 and 
                            and system_challan_serial_no= :systemChallanSerailNo;
                            ]]>
					</value>
				</entry>
				<entry key="get_adavance_totalTdsAmount">
					<value>
                            <![CDATA[SELECT sum(final_tds_amount) FROM Transactions.advance WHERE 
                            assessment_year = :assessmentYear and challan_month = challanMonth
                            and deductor_master_tan= :tan and active = 1 and approved_for_challan = :approved_for_challan 
                            and final_tds_section = :section and challan_paid = :isChallanPaid and is_parent=0 
                            :queryStr;
                            ]]>
					</value>
				</entry>
				<entry key="get_adavance_totalInterstAmount">
					<value>
                            <![CDATA[SELECT sum(interest) FROM Transactions.advance WHERE 
                            assessment_year = :assessmentYear and challan_month = challanMonth
                            and deductor_master_tan= :tan and active = 1 and approved_for_challan = :approved_for_challan 
                            and final_tds_section = :section and challan_paid = 0 and is_parent=0 and is_challan_generated = 0;
                            ]]>
					</value>
				</entry>
				<entry key="get_adavance_totalInterstAmount">
					<value>
                            <![CDATA[SELECT sum(penalty) FROM Transactions.advance WHERE 
                            assessment_year = :assessmentYear and challan_month = challanMonth
                            and deductor_master_tan= :tan and active = 1 and approved_for_challan = :approved_for_challan 
                            and final_tds_section = :section and challan_paid = 0 and is_parent=0 and is_challan_generated = 0;
                            ]]>
					</value>
				</entry>
				<entry key="get_adavance_totalTdsAmount_Aggregated">
					<value>
                            <![CDATA[SELECT sum(final_tds_amount) FROM Transactions.advance WHERE 
                            assessment_year = :assessmentYear and challan_month = challanMonth
                            and deductor_master_tan= :tan and active = 1 and approved_for_challan = :approved_for_challan 
                            and challan_paid = 0 and is_parent=0;
                            ]]>
					</value>
				</entry>
				<entry key="get_adavance_by_year_month_tan_section">
					<value>
                            <![CDATA[SELECT * FROM Transactions.advance WHERE 
                            assessment_year = :assessmentYear and challan_month = :challanMonth
                            and deductor_master_tan= :tan and active = 1 and final_tds_section = :section 
                            and approved_for_challan = :approved_for_challan 
                            and challan_paid = :isChallanPaid;
                            ]]>
					</value>
				</entry>
				<entry key="get_adavance_by_year_month_tan_withOutSection">
					<value>
                            <![CDATA[SELECT * FROM Transactions.advance WHERE 
                            assessment_year = :assessmentYear and challan_month = challanMonth
                            and deductor_master_tan= :tan and active = 1 and challan_paid = :isChallanPaid and is_parent=0 
                            and approved_for_challan = :approved_for_challan;
                            ]]>
					</value>
				</entry>
				<entry key="get_All_InvoiceMismatches_Page">
					<value>
					<![CDATA[
					     SELECT * FROM Transactions.invoice_line_item WHERE assessment_year=:year AND has_mismatch=1 AND active=0 AND 
					key_duplicate=0	 AND is_parent=0 AND challan_month=:month AND deductor_master_tan = :tan 
					ORDER BY document_posting_date]]>
					</value>
				</entry>
				<entry key="get_mismatch_count_by_year_and_month">
					<value>
					<![CDATA[ SELECT case when sum(invoice_amount) is null then 0 else sum(invoice_amount) end as Amount,
						case when sum(derived_tds_amount) is null then 0 else sum(derived_tds_amount) end as derivedTdsAmount,
						case when sum(actual_tds_amount) is null then 0 else sum(actual_tds_amount) end as actualTdsAmount,
						count(1) as totalCount FROM Transactions.invoice_line_item WHERE assessment_year=:assessmentYear AND deductor_master_tan=:tan
						AND challan_month = :assessmentMonth AND has_mismatch=1 AND active =0 AND key_duplicate=0  AND is_parent=0 AND 
						mismatch_category=:type; ]]>
					</value>
				</entry>
				<entry key="get_mismatch_count_by_batchid">
					<value>
					<![CDATA[ SELECT case when sum(invoice_amount) is null then 0 else sum(invoice_amount) end as Amount,
						case when sum(derived_tds_amount) is null then 0 else sum(derived_tds_amount) end as derivedTdsAmount,
						case when sum(actual_tds_amount) is null then 0 else sum(actual_tds_amount) end as actualTdsAmount,
						count(1) as totalCount FROM Transactions.invoice_line_item WHERE  deductor_master_tan=:tan AND batch_upload_id =:batchId AND
							has_mismatch=1 AND active =0 AND key_duplicate=0  AND is_parent=0 AND mismatch_category=:type ; ]]>
					</value>
				</entry>
				<entry key="get_TotalValue_By_SystemChallanSerialNo">
					<value>
					<![CDATA[ SELECT SUM(final_tds_amount) FROM Transactions.invoice_line_item WHERE assessment_year=:assessmentYear AND deductor_master_tan=:tan
						AND challan_month = :assessmentMonth AND active =1 AND key_duplicate=0  AND is_parent=0 AND challan_paid=1 AND 
						challan_serial_no =:systemChallanSerailNo; ]]>
					</value>
				</entry>
				<entry key="tcs_total_year_month_count">
					<value>
							<![CDATA[ SELECT COUNT(1) FROM Transactions.tcs_invoice_line_item WHERE assessment_year=:assessmentYear AND collector_tan = :tan
									AND challan_month = :assessmentMonth AND has_mismatch = 1 AND active = 0 AND (is_parent is null or is_parent =0) AND mismatch_category = :type ; ]]>
					</value>
				</entry>

				<entry key="tcs_invoice_line_item_by_id">
					<value>
			<![CDATA[ SELECT * FROM Transactions.tcs_invoice_line_item WHERE id = :lineItemId ]]>
					</value>
				</entry>


				<entry key="tcs_by_tan_pan_exempted">
					<value>
							<![CDATA[ 	SELECT * FROM Transactions.tcs_invoice_line_item WHERE collector_tan=:collectorTan AND collector_pan=:collectorPan AND 
	          is_exempted=1 AND assessment_year=:assessmentYear AND challan_month=:assessmentMonth; ]]>
					</value>
				</entry>
				<entry key="tcs_payment_by_tan_pan_exempted">
					<value>
							<![CDATA[ 	SELECT * FROM Transactions.tcs_payment WHERE collector_tan=:collectorTan AND collector_pan=:collectorPan AND 
	          is_exempted=1 AND assessment_year=:assessmentYear AND challan_month=:assessmentMonth; ]]>
					</value>
				</entry>
				<entry key="get_Total_Value_By_BatchId">
					<value>
					<![CDATA[ SELECT SUM( %1$s ) FROM Transactions.invoice_line_item WHERE  deductor_master_tan=:tan AND batch_upload_id =:batchId AND
							has_mismatch=1 AND active =0 AND key_duplicate=0  AND is_parent=0 AND mismatch_category=:type ;]]>
					</value>
				</entry>
				<entry key="get_Total_Value_By_BatchId_mismatchType">
					<value>
					<![CDATA[ SELECT count(1) FROM Transactions.invoice_line_item WHERE  deductor_master_tan=:tan AND batch_upload_id =:batchId AND
							has_mismatch=1 AND active =0 AND key_duplicate=0  AND is_parent=0 AND mismatch_category=:type ;]]>
					</value>
				</entry>
				<entry key="tcs_get_total_by_batch_id_count">
					<value>
						<![CDATA[ SELECT COUNT(1) FROM Transactions.tcs_invoice_line_item WHERE collector_tan =:tan AND batch_upload_id = :batchId AND
								has_mismatch = 1 AND active = 0 AND key_duplicate = 0 AND (is_parent is null or is_parent =0) AND mismatch_category = :type; ]]>
					</value>
				</entry>
				<entry key="get_Invoice_Deductees">
					<value>
					<![CDATA[ SELECT * FROM Transactions.invoice_line_item WHERE assessment_year=:assessmentYear AND deductor_master_tan=:tan AND 
			             is_resident =:type AND challan_month=:month AND active = 1 AND key_duplicate=0 AND  (is_parent is null or is_parent =0) ]]>
					</value>
				</entry>

				<entry key="get_adavance_by_year_month_tan_aggregated">
					<value>
                            <![CDATA[SELECT * FROM Transactions.advance WHERE 
                            assessment_year = :assessmentYear and challan_month = challanMonth
                            and deductor_master_tan= :tan and challan_paid = 0 
                            and approved_for_challan = :approved_for_challan and is_parent=0 and is_challan_generated = :isChallanGenerated;
                            ]]>
					</value>
				</entry>
				<entry key="find_all_invoices">
					<value>
					<![CDATA[
			 			 SELECT * FROM Transactions.invoice_line_item WHERE assessment_year=:assessmentYear AND deductor_master_tan=:tan AND 
						 challan_month = :assessmentMonth AND resident=:resType AND processed_from=:fileType AND key_duplicate = 0 AND is_parent = 0
						 AND has_provision = 0 AND has_advance = 0
				          ]]>
					</value>
				</entry>
				<entry key="find_all_invoices_count">
					<value>
					<![CDATA[
			 			SELECT COUNT(1) FROM Transactions.invoice_line_item WHERE assessment_year=:assessmentYear AND deductor_master_tan=:tan AND 
						 challan_month = :assessmentMonth AND resident=:resType AND processed_from=:fileType AND key_duplicate=0 AND is_parent=0
						 AND has_provision=0 AND has_advance=0	
				          ]]>
					</value>
				</entry>
				<entry key="get_SAP_InvoiceMismatches_By_BatchIdType">
					<value>
					<![CDATA[
					   SELECT * FROM Transactions.invoice_line_item WHERE  deductor_master_tan=:tan AND batch_upload_id= :batchId AND 
						processed_from =:processedFrom AND active=0 AND key_duplicate=0;
				          ]]>
					</value>
				</entry>
				<entry
					key="get_SAP_InvoiceMismatches_By_AssessmentYear_AssessmentMonth_Tan_Type">
					<value>
					<![CDATA[
					   SELECT * FROM Transactions.invoice_line_item WHERE  assessment_year=:assessmentYear AND assessment_month=:assessmentMonth
			           AND deductor_master_tan=:tan AND active=0 AND has_mismatch=1 AND processed_from=:processedFrom AND key_duplicate=0
		              AND mismatch_category=:type;
				          ]]>
					</value>
				</entry>
				<entry
					key="get_SAP_InvoiceMismatches_By_AssessmentYear_AssessmentMonth_BatchId_And_Mismatchcategory">
					<value>
					<![CDATA[
					   SELECT * FROM Transactions.invoice_line_item WHERE deductor_master_tan=:tan AND mismatch_category=:mismatchType AND
						 processed_from	=:processedFrom AND key_duplicate=0 ;
				          ]]>
					</value>
				</entry>
				<entry
					key="get_SAP_Invoices_By_AssessmentYear_ChallanMonth_By_TanMismatchCategory">
					<value>
					<![CDATA[
					   SELECT * FROM Transactions.invoice_line_item WHERE assessment_year=:assessmentYear AND assessment_month=:assessmentMonth 
						AND deductor_master_tan=:tan AND key_duplicate=0 AND is_parent=0;
				          ]]>
					</value>
				</entry>
				<entry
					key="get_Invoices_By_AssessmentYear_ChallanMonth_By_TanMismatchCategory">
					<value>
					<![CDATA[ SELECT * FROM Transactions.invoice_line_item WHERE assessment_year=:assessmentYear AND deductor_master_tan=:tan AND 
						challan_month=:challanMonth AND has_mismatch=1 AND active=0 AND mismatch_category=:category AND key_duplicate=0 AND 
						is_parent=0 %1$s ]]>
					</value>
				</entry>
				<entry
					key="get_Invoices_count_By_AssessmentYear_ChallanMonth_By_TanMismatchCategory">
					<value>
					<![CDATA[ SELECT COUNT(1) FROM Transactions.invoice_line_item WHERE assessment_year=:assessmentYear AND deductor_master_tan=:tan AND 
						challan_month=:challanMonth AND has_mismatch=1 AND active=0 AND mismatch_category=:category AND key_duplicate=0 AND 
						is_parent=0 ]]>
					</value>
				</entry>
				<entry key="find_By_LineItemId">
					<value>
					<![CDATA[
					  SELECT * FROM Transactions.invoice_line_item WHERE assessment_year=:assessmentYear AND deductor_master_tan=:tan AND 
					invoice_line_item_id = :lineItemId ;
				          ]]>
					</value>
				</entry>
				<entry key="get_Invoice_by_Type">
					<value>
					<![CDATA[ SELECT * FROM Transactions.invoice_line_item WHERE deductor_master_tan = :tan AND assessment_year = :year AND 
						document_type = :type AND found_invoice = 0 AND is_rejected = 0 AND key_duplicate = 0 AND active = 0 AND (is_parent is null or is_parent =0)
						AND challan_month = :month  ]]>
					</value>
				</entry>
				<entry key="get_Invoices_by_document_Type">
					<value>
					<![CDATA[ SELECT * FROM Transactions.invoice_line_item WHERE deductor_master_tan = :tan AND assessment_year <= :year AND 
						document_type = :type AND found_invoice = 0 AND is_rejected = 0 AND key_duplicate = 0 AND active = 0 AND (is_parent is null or is_parent =0)
						AND challan_month < :month  ]]>
					</value>
				</entry>
				<entry key="find_By_BatchUploadId_And_GLFound">
					<value>
					<![CDATA[ SELECT * FROM Transactions.invoice_line_item WHERE batch_upload_id=:batchId AND gl_found=:glFound AND 
			 				key_duplicate=0 AND has_mismatch=0 AND is_parent=0 AND document_type IN('INV', 'DR', 'RNV') ;]]>
					</value>
				</entry>
				<entry key="find_By_BatchUploadId_And_GLFound_count">
					<value>
					<![CDATA[ SELECT COUNT(1) FROM Transactions.invoice_line_item WHERE batch_upload_id=:batchId AND gl_found=:glFound AND 
			 				key_duplicate=0 AND has_mismatch=0 AND is_parent=0 AND document_type IN('INV', 'DR', 'RNV') ;]]>
					</value>
				</entry>
				<entry key="find_By_Year_Month_Tan_And_GLFound">
					<value>
					<![CDATA[ SELECT * FROM Transactions.invoice_line_item WHERE deductor_master_tan=:tan AND assessment_year=:year AND  challan_month IN(:months) AND gl_found=0
					AND is_parent=0 AND  key_duplicate=0 AND has_mismatch=0 AND document_type IN('INV', 'DR', 'RNV') ]]>
					</value>
				</entry>
				<entry key="find_By_Year_Tan_And_GLFound">
					<value>
					<![CDATA[ SELECT * FROM Transactions.invoice_line_item WHERE assessment_year=:year AND deductor_master_tan=:tan AND  gl_found=:glFound
					AND is_parent=0 AND  key_duplicate=0 AND has_mismatch=0 AND document_type IN('INV', 'DR', 'RNV') ]]>
					</value>
				</entry>
				<entry key="get_Invoce_Count_By_Type">
					<value>
					<![CDATA[
					SELECT COUNT(1) FROM Transactions.invoice_line_item WHERE assessment_year=:year AND deductor_master_tan=:tan AND document_type=:type
			AND found_invoice=0 AND key_duplicate=0 AND active=0 AND challan_month=:month;
				          ]]>
					</value>
				</entry>
				<entry key="invoiceLineItem_Based_On_Tan_And_Year">
					<value>
					<![CDATA[
					SELECT * FROM Transactions.invoice_line_item WHERE assessment_year=:year AND deductor_master_tan=:tan ;
				          ]]>
					</value>
				</entry>
				<entry key="invoices_Not_Found_In_GLCount_By_Tan_Year">
					<value>
					<![CDATA[
					SELECT COUNT(1) FROM Transactions.invoice_line_item WHERE assessment_year=:year AND deductor_master_tan=:tan
				AND gl_found =:glFound AND key_duplicate =0 AND is_parent =0 AND document_type in('INV','DR','RNV') AND 
				has_mismatch =0;
				          ]]>
					</value>
				</entry>
				<entry key="invoices_Not_Found_In_GLCount_By_Tan_Year_month">
					<value>
					<![CDATA[
					SELECT COUNT(1) FROM Transactions.invoice_line_item WHERE assessment_year=:year AND deductor_master_tan=:tan
				AND challan_month in(:months) AND  gl_found =:glFound AND key_duplicate =0 AND is_parent =0 AND document_type in('INV','DR','RNV') AND 
						has_mismatch =0;
				          ]]>
					</value>
				</entry>
				<entry key="get_Pdf_Transaction_Status">
					<value>
					<![CDATA[ SELECT COUNT(1) FROM Transactions.invoice_line_item WHERE assessment_year IN(:previousYear,:currentYear,:nextYear) AND
								deductor_master_tan = :tan  AND processed_from = :type AND active = 1 AND key_duplicate = 0 AND (is_parent is null or is_parent =0) AND
								approved_for_challan = 0 AND challan_paid = 0 AND created_date >= :startDate AND created_date <= :endDate; ]]>
					</value>
				</entry>
				<entry key="get_Tds_Calculation_Status">
					<value>
					<![CDATA[ SELECT COUNT(1) FROM Transactions.invoice_line_item WHERE assessment_year IN(:previousYear,:currentYear,:nextYear) AND
							deductor_master_tan = :tan AND has_mismatch = :isMismatch AND created_date >= :startDate AND created_date <= :endDate; ]]>
					</value>
				</entry>
				<entry key="get_Invoice_By_Year_Month_Tan_And_Section">
					<value>
					<![CDATA[
                      SELECT * FROM Transactions.invoice_line_item WHERE assessment_year=:assessmentYear AND deductor_master_tan=:tan AND
					challan_month=:challanMonth AND document_type IN('INV', 'DR', 'CR', 'RNV', 'CAN') AND active=1 AND tds_section=:section
					 AND  key_duplicate=0 AND is_parent=0 AND approved_for_challan=:approvedForChallan AND challan_paid=:isChallanPaid 
				          ]]>
					</value>
				</entry>
				<entry key="get_Invoice_Records_Without_Section">
					<value>
					<![CDATA[
                      SELECT * FROM Transactions.invoice_line_item WHERE assessment_year=:assessmentYear AND deductor_master_tan=:tan AND
						challan_month=:challanMonth AND document_type IN('INV', 'DR', 'CR', 'RNV', 'CAN') AND active=1 AND challan_paid=:isChallanPaid
						 AND  key_duplicate=0 AND is_parent=0 AND approved_for_challan=:approvedForChallan  ;]]>
					</value>
				</entry>

				<entry key="get_advance_resident_nonresident_Y">
					<value>
		                   <![CDATA[SELECT * FROM Transactions.advance WHERE 
		                   assessment_year = :assessmentYear and challan_month = :assessmentMonth
		                   and deductor_master_tan= :tan and is_resident = :resType and active = 1 and (is_parent is null or is_parent =0)
		                   ]]>
					</value>
				</entry>
				<entry key="get_advance_resident_nonresident_N">
					<value>
				           <![CDATA[SELECT * FROM Transactions.advance WHERE 
				       assessment_year = :assessmentYear and challan_month = :assessmentMonth
				       and deductor_master_tan= :tan and is_resident = :resType and active = 1 and (is_parent is null or is_parent =0)
				       ]]>
					</value>
				</entry>

				<entry key="get_advance_resident_nonresident_byDeductee_Y">
					<value>
	                   <![CDATA[SELECT * FROM Transactions.advance WHERE 
	                   assessment_year = :assessmentYear and challan_month = :assessmentMonth
	                   and deductor_master_tan= :tan and is_resident = :resType and (is_parent is null or is_parent =0) and deductee_name like :deducteeName
	                   ]]>
					</value>
				</entry>
				<entry key="get_advance_resident_nonresident_byDeductee_N">
					<value>
			           <![CDATA[SELECT * FROM Transactions.advance WHERE assessment_year = :assessmentYear and challan_month = :assessmentMonth
			       			and deductor_master_tan= :tan and is_resident = :resType and active = 1 and (is_parent is null or is_parent =0) and deductee_name like :deducteeName ]]>
					</value>
				</entry>
				<entry key="get_advance_deductees">
					<value>
						<![CDATA[ SELECT deductee_name, is_resident FROM Transactions.advance WHERE deductor_master_tan= :tan and is_resident = :type
                          and assessment_year = :year and challan_month = :month and (is_parent is null or is_parent =0) ]]>
					</value>
				</entry>

				<entry key="get_advance_total_value_and_count_by_batchid">
					<value>
						<![CDATA[ select case when sum(amount) is null then 0 else sum(amount) end as Amount,
						case when sum(derived_tds_amount) is null then 0 else sum(derived_tds_amount) end as derivedTdsAmount,
						case when sum(actual_tds_amount) is null then 0 else sum(actual_tds_amount) end as actualTdsAmount,
						count(1) as totalCount FROM Transactions.advance
						where deductor_master_tan = :tan and batch_upload_id = :batchId and mismatch = 1
						and active = 0 and mismatch_category = :type and (is_parent is null or is_parent =0); ]]>
					</value>
				</entry>
				<entry key="get_advance_total_value_by_year_month">
					<value>
					<![CDATA[ select case when sum(amount) is null then 0 else sum(amount) end as Amount,
						case when sum(derived_tds_amount) is null then 0 else sum(derived_tds_amount) end as derivedTdsAmount,
						case when sum(actual_tds_amount) is null then 0 else sum(actual_tds_amount) end as actualTdsAmount,
						count(1) as totalCount FROM Transactions.advance
						where  assessment_year = :assessmentYear and deductor_master_tan = :tan 
						and challan_month = :assessmentMonth and mismatch = 1
						and active = 0 and mismatch_category = :type and (is_parent is null or is_parent =0); ]]>
					</value>
				</entry>
				<entry key="get_provision_total_value_by_year_month">
					<value>
						<![CDATA[ select case when sum(provisional_amount) is null then 0 else sum(provisional_amount) end as Amount,
						case when sum(derived_tds_amount) is null then 0 else sum(derived_tds_amount) end as derivedTdsAmount,
						case when sum(withholding_amount) is null then 0 else sum(withholding_amount) end as actualTdsAmount,
						count(1) as totalCount FROM Transactions.provision
						where  assessment_year = :assessmentYear and deductor_master_tan = :tan 
						and challan_month = :assessmentMonth and mismatch = 1
						and active = 0 and mismatch_category = :type and (is_parent is null or is_parent =0); ]]>
					</value>
				</entry>
				<entry key="get_provision_total_value_and_count_by_batchid">
					<value>
						<![CDATA[ select case when sum(provisional_amount) is null then 0 else sum(provisional_amount) end as Amount,
						case when sum(derived_tds_amount) is null then 0 else sum(derived_tds_amount) end as derivedTdsAmount,
						case when sum(withholding_amount) is null then 0 else sum(withholding_amount) end as actualTdsAmount,
						count(1) as totalCount FROM Transactions.provision
						where deductor_master_tan = :tan and batch_upload_id = :batchId and mismatch = 1
						and active = 0 and mismatch_category = :type and (is_parent is null or is_parent =0); ]]>
					</value>
				</entry>
				<entry key="get_by_tan_batchId_mismatchCategory">
					<value>
			<![CDATA[ SELECT * FROM Transactions.advance WHERE 
			       deductor_master_tan = :deductorMasterTan and mismatch_category = :mismatchCategory
			       and mismatch= 1 and active = 0 and batch_upload_id = :batchUploadId and (is_parent is null or is_parent =0) ]]>
					</value>
				</entry>
				<entry key="find_invoiceMetaNr_By_LineItemId">
					<value>
						<![CDATA[ SELECT * FROM Transactions.invoice_meta_nr WHERE  invoice_meta_nr_id =:lineItemId ; ]]>
					</value>
				</entry>
				<entry key="find_invoice_Meta_Nr_By_DeducteeName_Tin">
					<value>
						<![CDATA[ SELECT * FROM Transactions.invoice_meta_nr WHERE  deductee_name =:deducteeName AND deductee_tin=:deducteeTin ;]]>
					</value>
				</entry>
				<entry key="update_Invoice_line_item">
					<value>
			<![CDATA[
			UPDATE Transactions.invoice_line_item SET  assessment_year=:assessmentYear , 
             deductor_master_tan=:deductorMasterTan , document_posting_date=:documentPostingDate , batch_upload_id=:batchUploadId , 
 accounting_voucher_date=:accountingVoucherDate , accounting_voucher_number=:accountingVoucherNumber , action=:actionType ,
  active=:active , actual_tds_amount=:actualTdsAmount , actual_tds_rate=:actualTdsRate , actual_tds_section=:actualTdsSection  
 , advance_applied_on=:advanceAppliedOn , advance_is_split_record=:advanceIsSplitRecord ,  
 after_returns=:afterReturns  , amount_paid_credited=:amountPaidCredited , approved_for_challan=:approvedForChallan ,  
 assessment_month=:assessmentMonth , cess_amount=:cessAmount , cess_rate=:cessRate , cgst_amount=:cgstAmount , 
 cgst_rate=:cgstRate , challan_generated_date=:challanGeneratedDate , challan_month=:challanMonth , challan_paid=:challanPaid ,   
  company_code=:companyCode , company_name=:companyName , confidence=:confidence ,   
 created_by=:createdBy , created_date=:createdDate , credit_debit_note=:creditDebitNote , creditable=:creditable ,   
 date_at_which_tds_is_deposited=:dateAtWhichTdsIsDeposited , date_on_which_tds_is_deducted=:dateOnWhichTdsIsDeducted ,   
 deductee_address=:deducteeAddress , deductee_name=:deducteeName , deductee_tin=:deducteeTin , deductor_code=:deductorCode ,   
 deductor_gstin=:deductorGstin , deductor_pan=:deductorPan , derived_tds_amount=:derivedTdsAmount , derived_tds_rate=:derivedTdsRate , derived_tds_section=:derivedTdsSection ,   
 document_date=:documentDate , document_number=:documentNumber , document_type=:documentType , excess=:excess,    
  final_tds_amount=:finalTdsAmount , final_tds_rate=:finalTdsRate , final_tds_section=:finalTdsSection 
 , found_invoice=:invoiceFound , gl_account_code=:glAccountCode , gl_found=:glFound , gross_indicator=:grossIndicator ,  
   grossing_up_indicator=:grossingUpIndicator , gstin=:gstin , has_advance=:hasAdvance , has_ldc=:hasLdc , has_mismatch=:hasMismatch , 
   has_provision=:hasProvision , igst_amount=:igstAmount , igst_rate=:igstRate , interest=:interest , invoice_amount=:invoiceAmount , is_amendment=:isAmendment ,  
   is_challan_generated=:isChallanGenerated , is_ldc_split_record=:isLdcSplitRecord , is_merge_record=:isMergeRecord , is_parent=:isParent , is_provision_split_record=:isProvisionSplitRecord ,  
   is_rejected=:isRejected , is_split_record=:isSplitRecord , key_duplicate=:keyDuplicate , ldc_applied_on=:ldcAppliedOn , line_item_number=:lineItemNumber , linked_advance_number=:linkedAdvanceNumber  
   , migo_number=:migoNumber , miro_number=:miroNumber , mismatch_category=:mismatchCategory , mismatch_interpretation=:mismatchInterpretation ,  
  mismatch_modified_date=:mismatchModifiedDate , modified_by=:modifiedBy , modified_date=:modifiedDate , original_document_date=:originalDocumentDate , original_document_number=:originalDocumentNumber , pan=:pan , 
  penalty=:penalty , po_date=:poDate , po_number=:poNumber , pos=:pos , processed_from=:processedFrom , provision_applied_on=:provisionAppliedOn , qty_supplied=:qtySupplied , reason=:finalReason , resident=:resident ,  
   sac_description=:sacDecription , section=:section , sequence_number=:sequenceNumber , service_description_gl=:serviceDescriptionGl , service_description_invoice=:serviceDescriptionInvoice , service_description_po=:serviceDescriptionPo
   , sgst_amount=:sgstAmount , sgst_rate=:sgstRate  , source_file_name=:sourceFileName , source_identifier=:sourceIdentifier , surcharge=:surcharge , tds_amount=:tdsAmount , tds_deducted=:tdsDeducted  
   , tds_rate=:tdsRate , tds_section=:tdsSection , threshold_limit=:thresholdLimit  , type=:invoiceType , 
  unit_of_measurement=:unitOfMeasurement , user_defined_field1=:userDefinedField1 ,  user_defined_field2=:userDefinedField2 ,  user_defined_field3=:userDefinedField3 , 
  vendor_invoice_number=:vendorInvoiceNumber  , challan_serial_no=:challanSerialNo , receipt_bsr_code=:receiptBsrCode , challan_paid_date=:challanPaidDate , system_challan_serial_no=:systemChallanSerialNumber 
 , hsn_sac_code=:hsnSacCode, client_effective_tds_rate = :clientEffectiveTdsRate, ancestor_id =:ancestorId, invoice_npid =:invoiceNpId 
  ,invoice_groupid =:groupId, ldc_certificate_number =:ldcCertificateNumber, error_reason = :errorReason, is_exempted = :isExempted, 
   client_taxable_amount =:clientTaxableAmount WHERE invoice_line_item_id=:id;
		          ]]>
					</value>
				</entry>
				<entry key="invoice_mismatch_update">
					<value>
			<![CDATA[
			       UPDATE Transactions.invoice_line_item SET action=:actionType,reason=:finalReason,final_tds_rate=:finalTdsRate,final_tds_section=:finalTdsSection,
			       final_tds_amount=:finalTdsAmount,has_mismatch=:hasMismatch,active=:active,surcharge=:surcharge,cess_amount=:cessAmount,interest=:interest 
			       WHERE invoice_line_item_id=:id; 
		          ]]>
					</value>
				</entry>
				<entry key="find_invoiceMetaNr_By_DeducteeName_Tin">
					<value>
			<![CDATA[
			SELECT * FROM Client_Masters.ao_master WHERE 
			deductor_master_tan= :deductorTan and deductee_name= :deducteeName and ao_master_id = :id AND nature_of_payment=:section;
		          ]]>
					</value>
				</entry>
				<entry
					key="find_invoice_By_Year_Tan_Document_PostingDate_Id_Active">
					<value>
						<![CDATA[ SELECT * FROM Transactions.invoice_line_item WHERE assessment_year=:year AND deductor_master_tan=:tan AND 
									invoice_line_item_id=:iD AND active = :activeFlag; ]]>
					</value>
				</entry>
				<entry key="find_invoice_By_Year_Tan_Document_PostingDate_Id">
					<value>
						<![CDATA[ SELECT * FROM Transactions.invoice_line_item WHERE assessment_year=:year AND deductor_master_tan=:tan AND 
									invoice_line_item_id=:iD AND active=1 ;]]>
					</value>
				</entry>
				<entry key="get_Invoices_By_CurrentMonth">
					<value>
						<![CDATA[ SELECT * FROM Transactions.invoice_line_item WHERE assessment_year=:assessmentYear AND deductor_master_tan=:tan AND 
									challan_month=:challanMonth AND document_type='INV' AND active=1 AND key_duplicate=0 AND is_parent=0
									AND has_mismatch=0 AND deductee_name=:deducteeName ]]>
					</value>
				</entry>

				<entry key="get_Invoices_count_by_current_month">
					<value>
						<![CDATA[ SELECT count(1) FROM Transactions.invoice_line_item WHERE assessment_year=:assessmentYear AND deductor_master_tan=:tan AND 
									challan_month=:challanMonth AND document_type='INV' AND active=1 AND key_duplicate=0 AND is_parent=0
									AND has_mismatch=0 AND deductee_name=:deducteeName ]]>
					</value>
				</entry>

				<entry key="find_invoinceMetaNr_By_NatureOfRemittance">
					<value>
						<![CDATA[ SELECT * FROM Transactions.invoice_meta_nr WHERE  invoice_meta_nr_id =:invoiceMetaNrId AND nature_of_remittance:natureOfRemittance ; ]]>
					</value>
				</entry>
				<entry key="find_By_Year_Month_Tan_And_ID">
					<value>
						<![CDATA[ SELECT * FROM Transactions.invoice_meta_nr WHERE  invoice_meta_nr_id =:id AND assessment_year=:year AND assessment_month=:month
								AND deductor_master_tan=:tan ; ]]>
					</value>
				</entry>
				<entry key="update_invoiceMeta_Nr">
					<value>
			<![CDATA[
					
					UPDATE Transactions.invoice_meta_nr SET invoice_meta_nr_id=:invoiceMetaNrId ,assessment_year=:year,assessment_month=:month
,deductor_master_tan=:tan, challan_month=:challanMonth ,aar_ruling_status_iligation=:aarRulingStatusIligation, address=:address, aggrement_date=:aggrementDate
 AND aggrement_document_number=:aggrementDocNumber, aggrement_external_council_view_doc=:aggrementExternalCouncilViewDoc,aggrement_nature_of_remittance=:aggrementNatureRemittance
  ,agreement_currency_amount=:agreementCurrencyAmount, agreement_currency_type=:aggrementCurrencyType,alternative_nature=:alternativeNature, amount=:amount,
  amount_of_income_tax_deducted=:amountOfIncomeTaxDeducted,amount_paid_credited_inr=:amountPaidCreditedInr,
ao_certificate_number=:aoCertificateNo,ao_rate=:aoRate,applicable_from=:applicableFrom,applicable_to=:applicableTo,assessee_status=:AssesseeStatus, 
basis_arriving_amount=:basisArrivingAmount,cbdt_circulars=:cbdtCirculars,certification_document_file=:certificationDocumentFile,
conclusion_facts_used_conclusion=:conclusionFactsUsedConclusion,consultation_per_process_note=:consultationProcessNote,created_by=:createdBy,
created_date=:createdDate,datt_lob_clause_impact_relevant_transaction=:dtaaLobClauseImpactRelevantTransaction,datt_lob_clause_rate=:dtaaLobClauseRate,
deductee_name=:deducteeName,deductee_pan=:deducteePan,deductee_tin=:deducteeTin,details_of_diff_opinion=:detailsDiffOpinion,doc_id_ks_docs_refered=:docIdKsDocsRefered,
document_number=:documentNumber,dtaa_existed_country=:dtaaExistedCountry,dtaa_mfn_clause_other_countries=:dtaaMfnClauseOtherCountries,dtaa_mfn_clause_rate=:dtaaMfnClauseRate,
dtaa_rate=:dtaaRate,dtaa_section=:dtaaSection,entitled_claim_relevant_dtaa_article=:entitledClaimRelevantDtaaArticle,
entitled_claim_relevant_rate=:entitledClaimRelevantRate,form10f_nationality=:formTenFNationality,form10f_pan_number=:formTenFPanNumber,
id_ks_docs_refered=:idKsDocsRefered,income_tax_business_concluding_reason=:incomeTaxBusinessConcludingReason,
income_tax_business_rate=:incomeTaxBusinessRate,income_tax_dtaa_reason=:incomeTaxDtaaReason,incometax_india_section=:incometaxIndiaSection,
inr_conversion_rate:isInrConversionRate,inr_credited_amount=:inrCreditedAmount,invoice_date=:invoiceDate,invoice_nature_of_remittance=:invoiceNatureOfRemittance,
invoice_number=:invoiceNumber,invoice_number_file=:invoiceNumberFile,invoice_reason=:invoiceReason,invoice_unavailbility_reason=:invoiceUnavailbilityReason,is_aar_application=:isAarApplication,
is_ao_order_section_this_transaction=:isAoOrderSection,is_benificiary_entitled_claim_dtaa=:isBenificiaryEntitledCclaimDtaa,is_benificiary_qualify_dual_person=:isBenificiaryQualifyDualPerson,
is_cbdt_circulars_refered=:isCbdtCircularsRefered,is_council_view_taken=:isCouncilViewTaken,is_diff_client_firm_certification=:isDiffClientFirmCertification,is_dtaa_exist=:isDtaaExist,
is_dtaa_lob_clause=:isDtaaLobClause,is_extrenal_council_view_taken:isExtrenalCouncilViewTaken,is_form10f_availble=:isFormTenFAvailble,is_form_fifteen=:isForm15,is_income_tax=:isIncomeTaxDtaa,
is_income_tax_business_reasons=:isIncomeTaxBusinessReasons,is_incometax_as_per_india_tax=:isIncometaxAsPerIndiaTax,is_inr_amount=:isInrAmount,is_invoice_note_transaction=:isInvoiceNoteTransaction,
is_ks_consultation_taken=:isKsConsultationTaken,is_ks_consultation_taken_process_note=:isKsConsultationTakenProcessNote,is_opinion=:isOpinion,is_others=:isOthers,is_poaltere_taken_position=:isPoaltereTakenPosition,
is_possible_taken_position=: isPossibleTakenPosition,is_releavant_doc=:isReleavantDoc,is_significant_risks_issues_taken=:isSignificantRisksIssuesTaken,
is_taken_as_per_process_note=:isTakenProcessNote,is_transaction_agreement_doc=:istransactionAgreementDoc,is_transaction_examined_past=:isTransactionExaminedPast,
is_trc=:isTrc,istenf_future=:istenfFuture,istrc_future=:istrcFuture,limit_utilized=:limitUtilized,line_item_id=:lineItemId,lob_clause_section=:lobClauseSection,
mfn_clause_section=:mfnClauseSection,nature_of_payment=:natureOfPayment,non_taxbility_reason=:nonTaxbilityReason,other_relevant_details=:otherRelevantDetails,
possible_availble_for_position=:possibleAvailbleForPosition,previous_transaction_nature_remittance=:previousTransactionRemittance,proposed_date_of_remittance=:proposedDateRemittance,
qualify_dual_person_country=:qualifyDualPersonCountry,reasons=:reasons,refered_judicial_precedents=:referedJudicialPrecedents,relevant_country_dtaa_exist=:relevantCountryDtaaExist,
relevent_form_15cb_doc=:releventForm15CBDoc,relevent_opinion_doc=:releventOpinionDoc,relevent_others_doc:releventOthersDoc,remittance_date=:remittanceDate,
revelant_doc=:revelantDoc,section=:section,selection_explanation=:selectionExplanation,siginificant_risks_issues=:siginificantRisksIssues,tenf_future_date=:tenfFutureDate,
transaction_agreement_doc_reason=:transactionAggrementDocReason,transaction_examination_result=:transactionExaminationResult,transaction_opinion=:transactionOpinion,
trc_future_date=:trcFutureDate,trc_nationality=:trcNationality,trc_residentials_status_period=:trcResidentialsStatusPeriod,type=:type,is_datt_mfn_clause=:isDtaaMfnClause WHERE
invoice_meta_nr_id=:invoiceMetaNrId;
					
		          ]]>
					</value>
				</entry>

				<entry key="get_advance_by_tan_batchId_mismatchCategory">
					<value>
						<![CDATA[ SELECT * FROM Transactions.advance WHERE deductor_master_tan = :deductorMasterTan and mismatch_category = :mismatchCategory
			       					and mismatch = 1 and active = 0 and batch_upload_id = :batchUploadId and (is_parent is null or is_parent =0) and is_error =0 ]]>
					</value>
				</entry>
				<entry key="get_count_advance_by_tan_batchId_mismatchCategory">
					<value>
						<![CDATA[ SELECT COUNT(*) FROM Transactions.advance WHERE deductor_master_tan = :deductorMasterTan and mismatch_category = :mismatchCategory
			       					and mismatch = 1 and active = 0 and batch_upload_id = :batchUploadId and (is_parent is null or is_parent =0) and is_error =0 ]]>
					</value>
				</entry>
				<entry
					key="find_advance_By_Year_Tan_Document_PostingDate_Id_Active">
					<value>
			<![CDATA[
			SELECT * FROM Transactions.advance WHERE assessment_year=:year AND deductor_master_tan=:tan AND 
			advance_id=:id AND active = :activeFlag;
		          ]]>
					</value>
				</entry>
				<entry key="find_ldc_By_Tan_pan_section_docuemntDate">
					<value>
						<![CDATA[ SELECT LM.* FROM Client_Masters.ldc_master LM
									WHERE LM.ldc_master_pan = :deducteePan AND LM.deductor_master_tan = :deductorMasterTan AND LM.section = :finalTdsSection AND
      								CONVERT(DATE,LM.applicable_from) <= :documentDate AND  CONVERT(DATE,LM.applicable_to) >= :documentDate AND LM.status = 'valid';
		          			]]>
					</value>
				</entry>
				<entry key="find_ldc_remainingBalance">
					<value>
			<![CDATA[
					SELECT SUM(amount) - ISNULL(SUM(LM.utilized_amount),0) - ISNULL(SUM(LU.utilized_amount),0) AS remainingBalance
				FROM Client_Masters.ldc_master LM
				left JOIN Transactions.ldc_utilization LU ON LM.ldc_master_id = LM.ldc_master_id
				WHERE LM.ldc_master_pan = :deducteePan AND LM.deductor_master_tan = :deductorMasterTan AND LM.section = :finalTdsSection AND
      			CONVERT(DATE,LM.applicable_from) <= :documentDate AND  CONVERT(DATE,LM.applicable_to) >= :documentDate AND LM.status = 'valid';
		          ]]>
					</value>
				</entry>
				<entry key="ldc_utilization_update">
					<value>
				           <![CDATA[UPDATE Transactions.ldc_utilization
    						SET assessment_year= :assessmentYear, assessment_month= :assessmentMonth, deductor_master_tan= :deductorMasterTan, 
   							ldc_master_ldc_applicable_from= :ldcMasterAoApplicableFrom, ldc_master_ldc_applicable_to= :ldcMasterAoApplicableTo, 
  							ldc_master_id= :ldcMasterId, ldc_master_pan= :ldcMasterPan, 
							ldc_master_total_amount= :ldcMasterTotalAmount, ldc_master_utilized_amount= :ldcMasterUtilizedAmount, active= :active, 
   							consumed_from= :consumedFrom, created_by= :createdBy, 
   							created_date= :createdDate, modified_by= :modifiedBy, modified_date= :modifiedDate, remaining_amount= :remainingAmount, 
   							utilized_amount= :utilizedAmount, challan_month= :challanMonth, 
   							invoice_process_date= :invoiceProcessDate, line_item_id= :lineItemId
						WHERE ldc_utilization_id = :ldcUtilizationId;
				    ]]>
					</value>
				</entry>


				<entry key="get_advance_By_tan_mimatch">
					<value>
                            <![CDATA[ SELECT * FROM Transactions.advance WHERE 
                            assessment_year = :assessmentYear and challan_month = :month
                            and deductor_master_tan= :deductorMasterTan and mismatch_category = :mismatchCategory 
                            and mismatch = 1 and active = 0 and (is_parent is null or is_parent =0) ]]>
					</value>
				</entry>
				<entry key="get_advance_By_tan_mimatch_count">
					<value>
                            <![CDATA[ SELECT count(1) FROM Transactions.advance WHERE 
                            assessment_year = :assessmentYear and challan_month = :month
                            and deductor_master_tan= :deductorMasterTan and mismatch_category = :mismatchCategory 
                            and mismatch = 1 and active = 0 and (is_parent is null or is_parent =0) ]]>
					</value>
				</entry>
				<entry key="get_advance_By_tan_mimatch_year">
					<value>
                            <![CDATA[ SELECT * FROM Transactions.advance WHERE 
                            assessment_year = :year and challan_month = :month
                            and deductor_master_tan= :deductorMasterTan 
                            and mismatch = 1 and active = 0 and (is_parent is null or is_parent =0) 
                            ORDER BY posting_date_of_document]]>
					</value>
				</entry>
				<entry key="get_provision_By_tan_mimatch">
					<value>
                            <![CDATA[ SELECT * FROM Transactions.provision WHERE 
                            assessment_year = :assessmentYear and challan_month = :month
                            and deductor_master_tan= :deductorMasterTan and mismatch_category = :mismatchCategory 
                            and mismatch = 1 and active = 0 and (is_parent is null or is_parent =0) ]]>
					</value>
				</entry>
				<entry key="get_provision_By_tan_mimatch_count">
					<value>
                            <![CDATA[ SELECT count(1) FROM Transactions.provision WHERE 
                            assessment_year = :assessmentYear and challan_month = :month
                            and deductor_master_tan= :deductorMasterTan and mismatch_category = :mismatchCategory 
                            and mismatch = 1 and active = 0 and (is_parent is null or is_parent =0) ]]>
					</value>
				</entry>
				<entry key="get_provision_By_tan_mimatch_year">
					<value>
                            <![CDATA[ SELECT * FROM Transactions.provision WHERE 
                            assessment_year = :year and challan_month = :month
                            and deductor_master_tan= :deductorMasterTan  
                            and mismatch = 1 and active = 0 and (is_parent is null or is_parent =0) 
                            ORDER BY posting_date_of_document ]]>
					</value>
				</entry>
				<entry key="get_advance_mismatch_count">
					<value>
                            <![CDATA[SELECT count(1) 
					FROM Transactions.advance 
					WHERE assessment_year= :year
					AND challan_month= :month AND deductor_master_tan = :deductorMasterTan
					AND mismatch= 1 AND active = 0
					AND (is_parent is null or is_parent =0) 
                            ]]>
					</value>
				</entry>
				<entry key="get_advance_ftm">
					<value>
                            <![CDATA[SELECT * 
					FROM Transactions.advance 
					WHERE assessment_year= :year
					AND challan_month= :month AND deductor_master_tan = :deductorMasterTan
					AND active = 1
					AND (is_parent is null or is_parent =0) 
                            ]]>
					</value>
				</entry>
				<entry key="get_advance_adjusted">
					<value>
                            <![CDATA[
					SELECT * FROM Transactions.advance_utilization 
					WHERE assessment_year= :year
					AND challan_month= :month AND deductor_master_tan = :deductorMasterTan
					AND active = 1;
                            ]]>
					</value>
				</entry>
				<entry key="get_advance_adjusted_based_on_year">
					<value>
                            <![CDATA[
					SELECT * FROM Transactions.advance_utilization 
					WHERE assessment_year= :year
					AND  deductor_master_tan = :deductorMasterTan
					AND active = 1;
                            ]]>
					</value>
				</entry>
				<entry key="get_provision_adjusted">
					<value>
                            <![CDATA[SELECT * 
					FROM Transactions.provision_utilization  
					WHERE assessment_year= :year
					AND challan_month= :month AND deductor_master_tan = :deductorMasterTan
					AND active = 1;
                            ]]>
					</value>
				</entry>
				<entry key="find_by_year_tan_ids">
					<value>
				<![CDATA[
		      	SELECT * FROM Transactions.invoice_line_item WHERE assessment_year= :year,deductor_master_tan= :tan,
		     	 invoice_line_item_id in (:lineItemIds),active= :activeFlag;
	          	]]>
					</value>
				</entry>
				<entry
					key="find_provision_By_Year_Tan_Document_PostingDate_Id">
					<value>
			<![CDATA[
			SELECT * FROM Transactions.provision WHERE assessment_year=:year AND deductor_master_tan=:tan AND 
			provision_id=:id;
		          ]]>
					</value>
				</entry>

				<entry
					key="find_provision_By_Year_Tan_Document_PostingDate_Id_active">
					<value>
			<![CDATA[
			SELECT * FROM Transactions.provision WHERE assessment_year=:year AND deductor_master_tan=:tan AND 
			provision_id=:id AND active=:activeFlag;
		          ]]>
					</value>
				</entry>
				<entry key="get_provision_by_tan_batchId_mismatchCategory">
					<value>
						<![CDATA[ SELECT * FROM Transactions.provision WHERE deductor_master_tan = :deductorMasterTan and mismatch_category = :mismatchCategory
			       					and mismatch= 1 and active = 0 and batch_upload_id = :batchUploadId and (is_parent is null or is_parent =0) and is_error =0 ]]>
					</value>
				</entry>
				<entry
					key="get_count_provision_by_tan_batchId_mismatchCategory">
					<value>
						<![CDATA[ SELECT COUNT(1) FROM Transactions.provision WHERE deductor_master_tan = :deductorMasterTan and mismatch_category = :mismatchCategory
			       					and mismatch= 1 and active = 0 and batch_upload_id = :batchUploadId and (is_parent is null or is_parent =0 ) and is_error =0 ]]>
					</value>
				</entry>
				<entry key="get_provision_mismatch_count">
					<value>
                            <![CDATA[SELECT count(1) 
					FROM Transactions.provision 
					WHERE assessment_year= :year
					AND challan_month= :month AND deductor_master_tan = :deductorMasterTan
					AND mismatch= 1 AND active = 0
					AND (is_parent is null or is_parent =0) 
                            ]]>
					</value>
				</entry>
				<entry key="get_advance_matrix">
					<value>
				           <![CDATA[
			          
DECLARE @OpeingAmount DECIMAL(30,2),
        @month INT = 4,
        @assessment_year INT = :year,
        @deductor_master_tan varchar(25) = :deductorMasterTan,
        @is_tds_amount SMALLINT = :isTdsAmount;
        CREATE TABLE #TEMP
        (Month varchar(25),
        OpeingAmount DECIMAL(30,2),
        FTM DECIMAL(30,2),
        Adjusted DECIMAL(30,2),
        ClosingAmount DECIMAL(30,2));
        INSERT INTO #TEMP(Month,OpeingAmount,FTM,Adjusted,ClosingAmount)
        SELECT @month AS Month,(SUM(TotalAdvanceAmount)-SUM(TotalAdvanceUtilizedAmount)) AS OpeningAmount,
               SUM(TotalAdvanceAmountByMonth) AS TotalAdvanceAmountByMonth,
               SUM(TotalAdvanceUtilizedAmountByMonth) AS TotalAdvanceUtilizedAmountByMonth,
               ((SUM(TotalAdvanceAmount)-SUM(TotalAdvanceUtilizedAmount)) + SUM(TotalAdvanceAmountByMonth))- SUM(TotalAdvanceUtilizedAmountByMonth) AS ClosingAmount
        FROM
        (SELECT IIF (@is_tds_amount=0,ISNULL(SUM(amount),0),ISNULL(SUM(final_tds_amount),0)) AS TotalAdvanceAmount,0.00 AS TotalAdvanceUtilizedAmount ,0.00 AS TotalAdvanceAmountByMonth,0.00 AS TotalAdvanceUtilizedAmountByMonth
        FROM Transactions.advance
        WHERE assessment_year < @assessment_year  AND deductor_master_tan = @deductor_master_tan AND
              active = 1 AND is_parent =0 AND supply_type <> 'CAN'
        UNION ALL
        SELECT 0.00,IIF (@is_tds_amount=0,ISNULL(SUM(utilized_amount),0),ISNULL(SUM(utilized_tds_amount),0)) AS TotalAdvanceUtilizedAmount,0.00,0.00
        FROM Transactions.advance_utilization
        WHERE assessment_year < @assessment_year AND deductor_master_tan = @deductor_master_tan AND active = 1
        UNION ALL
        SELECT 0.00,0.00,IIF (@is_tds_amount=0,ISNULL(SUM(amount),0),ISNULL(SUM(final_tds_amount),0)) AS TotalAdvanceAmountByMonth,0.00
        FROM Transactions.advance
        WHERE assessment_year = @assessment_year AND deductor_master_tan = @deductor_master_tan AND challan_month = @month AND
              active= 1 AND is_parent= 0 AND supply_type <> 'CAN'
        UNION ALL
        SELECT 0.00,0.00,0.00,IIF (@is_tds_amount=0,ISNULL(SUM(utilized_amount),0),ISNULL(SUM(utilized_tds_amount),0)) AS TotalAdvanceUtilizedAmountByMonth
        FROM Transactions.advance_utilization
        WHERE assessment_year = @assessment_year AND deductor_master_tan = @deductor_master_tan AND active = 1
         AND challan_month= @month) A
        SET @month = 5
        WHILE @month < 13
        BEGIN
            SELECT @OpeingAmount = ISNULL(ClosingAmount,0)
            FROM #TEMP
            INSERT INTO #TEMP(Month,OpeingAmount,FTM,Adjusted,ClosingAmount)
            SELECT @month AS Month,@OpeingAmount,
                   SUM(TotalAdvanceAmountByMonth) AS TotalAdvanceAmountByMonth,
                   SUM(TotalAdvanceUtilizedAmountByMonth) AS TotalAdvanceUtilizedAmountByMonth,
                  (@OpeingAmount + SUM(TotalAdvanceAmountByMonth))- SUM(TotalAdvanceUtilizedAmountByMonth) AS ClosingAmount
            FROM(
                 SELECT IIF (@is_tds_amount=0,ISNULL(SUM(amount),0),ISNULL(SUM(final_tds_amount),0)) AS TotalAdvanceAmountByMonth,0.00 AS TotalAdvanceUtilizedAmountByMonth
                 FROM Transactions.advance
                 WHERE assessment_year = @assessment_year AND deductor_master_tan = @deductor_master_tan AND challan_month = @month AND
                       active= 1 AND is_parent= 0 AND supply_type <> 'CAN'
                 UNION ALL
                 SELECT 0.00,IIF (@is_tds_amount=0,ISNULL(SUM(utilized_amount),0),ISNULL(SUM(utilized_tds_amount),0)) AS TotalAdvanceUtilizedAmountByMonth
                 FROM Transactions.advance_utilization
                 WHERE assessment_year = @assessment_year AND deductor_master_tan = @deductor_master_tan AND active = 1
                        AND challan_month= @month)A
               SET @month = @month + 1;
        END
        IF @month = 13
        BEGIN
           SET @month = 1
           WHILE @month < 4
           BEGIN
              SELECT @OpeingAmount = ISNULL(ClosingAmount,0)
            FROM #TEMP
            INSERT INTO #TEMP(Month,OpeingAmount,FTM,Adjusted,ClosingAmount)
            SELECT @month AS Month,@OpeingAmount,
                   SUM(TotalAdvanceAmountByMonth) AS TotalAdvanceAmountByMonth,
                   SUM(TotalAdvanceUtilizedAmountByMonth) AS TotalAdvanceUtilizedAmountByMonth,
                  (@OpeingAmount + SUM(TotalAdvanceAmountByMonth))- SUM(TotalAdvanceUtilizedAmountByMonth) AS ClosingAmount
            FROM(
                 SELECT IIF (@is_tds_amount=0,ISNULL(SUM(amount),0),ISNULL(SUM(final_tds_amount),0)) AS TotalAdvanceAmountByMonth,0.00 AS TotalAdvanceUtilizedAmountByMonth
                 FROM Transactions.advance
                 WHERE assessment_year = @assessment_year AND deductor_master_tan = @deductor_master_tan AND challan_month = @month AND
                       active= 1 AND is_parent= 0 AND supply_type <> 'CAN'
                 UNION ALL
                 SELECT 0.00,IIF (@is_tds_amount=0,ISNULL(SUM(utilized_amount),0),ISNULL(SUM(utilized_tds_amount),0)) AS TotalAdvanceUtilizedAmountByMonth
                 FROM Transactions.advance_utilization
                 WHERE assessment_year = @assessment_year AND deductor_master_tan = @deductor_master_tan AND active = 1
                        AND challan_month= @month )A
               SET @month = @month + 1;
           END
        END
        SELECT * FROM #TEMP


				    ]]>
					</value>
				</entry>
				<entry key="get_provision_matrix">
					<value>
                            <![CDATA[
			          
DECLARE @OpeingAmount DECIMAL(30,2),
        @month INT = 4,
        @assessment_year INT = :year,
        @deductor_master_tan varchar(25) = :deductorMasterTan,
        @is_tds_amount SMALLINT =:isTdsAmount;
        CREATE TABLE #TEMP
        (Month varchar(25),
        OpeingAmount DECIMAL(30,2),
        FTM DECIMAL(30,2),
        Adjusted DECIMAL(30,2),
        ClosingAmount DECIMAL(30,2));
        INSERT INTO #TEMP(Month,OpeingAmount,FTM,Adjusted,ClosingAmount)
        SELECT @month AS Month,(SUM(TotalProvisionAmount)-SUM(TotalProvisionUtilizedAmount)) AS OpeningAmount,
               SUM(TotalProvisionAmountByMonth) AS TotalProvisionAmountByMonth,
               SUM(TotalProvisionUtilizedAmountByMonth) AS TotalProvisionUtilizedAmountByMonth,
               ((SUM(TotalProvisionAmount)-SUM(TotalProvisionUtilizedAmount)) + SUM(TotalProvisionAmountByMonth))- SUM(TotalProvisionUtilizedAmountByMonth) AS ClosingAmount
        FROM
        (SELECT IIF (@is_tds_amount=0,ISNULL(SUM(provisional_amount),0),ISNULL(SUM(final_tds_amount),0)) AS TotalProvisionAmount,0.00 AS TotalProvisionUtilizedAmount ,0.00 AS TotalProvisionAmountByMonth,0.00 AS TotalProvisionUtilizedAmountByMonth
        FROM Transactions.provision
        WHERE assessment_year < @assessment_year  AND deductor_master_tan = @deductor_master_tan AND
        active = 1 AND is_parent = 0 AND supply_type <> 'CAN' 
        UNION ALL
        SELECT 0.00,IIF (@is_tds_amount=0,ISNULL(SUM(utilized_amount),0),ISNULL(SUM(utilized_tds_amount),0)) AS TotalProvisionUtilizedAmount,0.00,0.00
        FROM Transactions.provision_utilization
        WHERE assessment_year < @assessment_year AND deductor_master_tan = @deductor_master_tan AND active = 1
        UNION ALL
        SELECT 0.00,0.00,IIF (@is_tds_amount=0,ISNULL(SUM(provisional_amount),0),ISNULL(SUM(final_tds_amount),0)) AS TotalProvisionAmountByMonth,0.00
        FROM Transactions.provision
        WHERE assessment_year = @assessment_year AND deductor_master_tan = @deductor_master_tan AND challan_month = @month AND
              active= 1 AND is_parent= 0 AND supply_type <> 'CAN'
        UNION ALL
        SELECT 0.00,0.00,0.00,IIF (@is_tds_amount=0,ISNULL(SUM(utilized_amount),0),ISNULL(SUM(utilized_tds_amount),0)) AS TotalProvisionUtilizedAmountByMonth
        FROM Transactions.provision_utilization
        WHERE assessment_year = @assessment_year AND deductor_master_tan = @deductor_master_tan AND active = 1
         AND challan_month= @month) A
        SET @month = 5
        WHILE @month < 13
        BEGIN
            SELECT @OpeingAmount = ISNULL(ClosingAmount,0)
            FROM #TEMP
            INSERT INTO #TEMP(Month,OpeingAmount,FTM,Adjusted,ClosingAmount)
            SELECT @month AS Month,@OpeingAmount,
                   SUM(TotalProvisionAmountByMonth) AS TotalProvisionAmountByMonth,
                   SUM(TotalProvisionUtilizedAmountByMonth) AS TotalProvisionUtilizedAmountByMonth,
                  (@OpeingAmount + SUM(TotalProvisionAmountByMonth))- SUM(TotalProvisionUtilizedAmountByMonth) AS ClosingAmount
            FROM(
                 SELECT IIF (@is_tds_amount=0,ISNULL(SUM(provisional_amount),0),ISNULL(SUM(final_tds_amount),0)) AS TotalProvisionAmountByMonth,0.00 AS TotalProvisionUtilizedAmountByMonth
                 FROM Transactions.provision
                 WHERE assessment_year = @assessment_year AND deductor_master_tan = @deductor_master_tan AND challan_month = @month AND
                       active= 1 AND is_parent= 0 AND supply_type <> 'CAN'
                 UNION ALL
                 SELECT 0.00,IIF (@is_tds_amount=0,ISNULL(SUM(utilized_amount),0),ISNULL(SUM(utilized_tds_amount),0)) AS TotalProvisionUtilizedAmountByMonth
                 FROM Transactions.provision_utilization
                 WHERE assessment_year = @assessment_year AND deductor_master_tan = @deductor_master_tan AND active = 1
                        AND challan_month= @month)A
               SET @month = @month + 1;
        END
        IF @month = 13
        BEGIN
           SET @month = 1
           WHILE @month < 4
           BEGIN
              SELECT @OpeingAmount = ISNULL(ClosingAmount,0)
            FROM #TEMP
            INSERT INTO #TEMP(Month,OpeingAmount,FTM,Adjusted,ClosingAmount)
            SELECT @month AS Month,@OpeingAmount,
                   SUM(TotalProvisionAmountByMonth) AS TotalProvisionAmountByMonth,
                   SUM(TotalProvisionUtilizedAmountByMonth) AS TotalProvisionUtilizedAmountByMonth,
                  (@OpeingAmount + SUM(TotalProvisionAmountByMonth))- SUM(TotalProvisionUtilizedAmountByMonth) AS ClosingAmount
            FROM(
                 SELECT IIF (@is_tds_amount=0,ISNULL(SUM(provisional_amount),0),ISNULL(SUM(final_tds_amount),0)) AS TotalProvisionAmountByMonth,0.00 AS TotalProvisionUtilizedAmountByMonth
                 FROM Transactions.provision
                 WHERE assessment_year = @assessment_year AND deductor_master_tan = @deductor_master_tan AND challan_month = @month AND
                       active= 1 AND is_parent= 0 AND supply_type <> 'CAN'
                 UNION ALL
                 SELECT 0.00,IIF (@is_tds_amount=0,ISNULL(SUM(utilized_amount),0),ISNULL(SUM(utilized_tds_amount),0)) AS TotalProvisionUtilizedAmountByMonth
                 FROM Transactions.provision_utilization
                 WHERE assessment_year = @assessment_year AND deductor_master_tan = @deductor_master_tan AND active = 1
                        AND challan_month= @month)A
               SET @month = @month + 1;
           END
        END
SELECT * FROM #TEMP
DROP TABLE #TEMP


                            ]]>
					</value>
				</entry>
				<entry key="get_provision_ftm">
					<value>
                            <![CDATA[SELECT * 
					FROM Transactions.provision 
					WHERE assessment_year= :year
					AND challan_month=:month AND deductor_master_tan = :deductorMasterTan
					AND active = 1
					AND (is_parent is null or is_parent =0) 
                            ]]>
					</value>
				</entry>
				<entry key="get_provision_closing_and_opening_matrix_report">
					<value>
                            <![CDATA[
           				DECLARE @month INT = :month,
		@assessment_year INT = :year,
		@deductor_master_tan VARCHAR(25) = :deductorMasterTan
                        
             CREATE TABLE #TEMP
            (deductorMasterTan VARCHAR(25),
            openingAmount DECIMAL(30,2),
            adjusted DECIMAL(30,2),
            closingAmount DECIMAL(30,2),
            deducteePan VARCHAR(25),
            deducteeName VARCHAR(256),
            postingDateOfDocument DATETIME,
            tdsAmount DECIMAL(30,2),
            utilizedTdsAmount DECIMAL(30,6),
			finalTdsRate DECIMAL(30,6),
			finalTdsSection VARCHAR(15),
			documentNumber VARCHAR(25));
            
            IF @month BETWEEN 4 AND 12
            BEGIN
            INSERT INTO #TEMP(deductorMasterTan,openingAmount,adjusted,closingAmount,deducteePan,
                              deducteeName,postingDateOfDocument,tdsAmount,utilizedTdsAmount,
							  finalTdsRate,finalTdsSection,documentNumber)
            SELECT deductor_master_tan AS deductorMasterTan,SUM(TotalProvisionAmount) AS openingAmount,
                   SUM(TotalProvisionUtilizedAmount) AS adjusted,
                   (SUM(TotalProvisionAmount)-SUM(TotalProvisionUtilizedAmount)) AS closingAmount,
                   deductee_pan AS deducteePan,deductee_name AS deducteeName,
                   posting_date_of_document AS postingDateOfDocument,SUM(tdsAmount) AS tdsAmount,
                   SUM(utilizedTdsAmount) AS utilizedTdsAmount,final_tds_rate,final_tds_section,document_number
            FROM
            ((SELECT deductor_master_tan,ISNULL(SUM(provisional_amount),0) AS TotalProvisionAmount,0 AS TotalProvisionUtilizedAmount ,
                     deductee_pan,deductee_name,posting_date_of_document,
                     ISNULL(SUM(final_tds_amount),0) AS tdsAmount,0 AS utilizedTdsAmount,
					 final_tds_rate,final_tds_section,document_number
            FROM Transactions.provision 
            WHERE assessment_year < @assessment_year AND deductor_master_tan = @deductor_master_tan AND 
                  active = 1 AND (is_parent IS NULL OR is_parent =0)
            GROUP BY deductor_master_tan,deductee_pan,deductee_name,posting_date_of_document,final_tds_rate,final_tds_section,document_number)
            UNION ALL
            (SELECT deductor_master_tan,ISNULL(SUM(provisional_amount),0) AS TotalProvisionAmount,0 AS TotalProvisionUtilizedAmount,
                    deductee_pan,deductee_name,posting_date_of_document,ISNULL(SUM(final_tds_amount),0) AS tdsAmount,0 AS utilizedTdsAmount,
					final_tds_rate,final_tds_section,document_number
            FROM Transactions.provision
            WHERE assessment_year = @assessment_year AND deductor_master_tan = @deductor_master_tan AND 
                  active = 1 AND (is_parent IS NULL OR is_parent =0) AND challan_month <= @month AND challan_month BETWEEN 4 AND 12
            GROUP BY deductor_master_tan,deductee_pan,deductee_name,posting_date_of_document,
			         final_tds_rate,final_tds_section,document_number)
            UNION ALL
            (SELECT P.deductor_master_tan,0 AS TotalProvisionAmount,ISNULL(SUM(PU.utilized_amount),0) AS TotalProvisionUtilizedAmount ,
                    P.deductee_pan,P.deductee_name,P.posting_date_of_document,
                    0 AS tdsAmount,ISNULL(SUM(PU.utilized_tds_amount),0) AS utilizedTdsAmount,final_tds_rate,final_tds_section,document_number
            FROM Transactions.provision P
            INNER JOIN Transactions.provision_utilization PU ON P.provision_id = PU.provision_master_id
            WHERE P.assessment_year < @assessment_year AND P.deductor_master_tan = @deductor_master_tan AND 
                  P.active = 1 AND (P.is_parent IS NULL OR P.is_parent =0) AND PU.assessment_year < @assessment_year AND 
                  PU.deductor_master_tan = @deductor_master_tan AND PU.active = 1
            GROUP BY P.deductor_master_tan,P.deductee_pan,P.deductee_name,P.posting_date_of_document,
			         final_tds_rate,final_tds_section,document_number)
            UNION ALL
            (SELECT P.deductor_master_tan,0 AS TotalProvisionAmount,ISNULL(SUM(PU.utilized_amount),0) AS TotalProvisionUtilizedAmount,
                    P.deductee_pan,P.deductee_name,P.posting_date_of_document,0 AS tdsAmount,
                    ISNULL(SUM(PU.utilized_tds_amount),0) AS utilizedTdsAmount,final_tds_rate,final_tds_section,document_number
            FROM Transactions.provision P
            INNER JOIN Transactions.provision_utilization PU ON P.provision_id = PU.provision_master_id 
            WHERE P.assessment_year = @assessment_year AND P.deductor_master_tan = @deductor_master_tan AND 
                  P.active = 1 AND (P.is_parent IS NULL OR P.is_parent =0) AND P.challan_month <= @month AND
                  PU.assessment_year = @assessment_year AND PU.deductor_master_tan = @deductor_master_tan AND 
                  PU.active = 1 AND PU.challan_month <= @month AND P.challan_month BETWEEN 4 AND 12 AND PU.challan_month BETWEEN 4 AND 12
            GROUP BY P.deductor_master_tan,P.deductee_pan,P.deductee_name,P.posting_date_of_document,
			         final_tds_rate,final_tds_section,document_number)) A
            GROUP BY deductor_master_tan,deductee_pan,deductee_name,posting_date_of_document,
			         final_tds_rate,final_tds_section,document_number
            
            SELECT * FROM #TEMP
            END
            IF @month BETWEEN 1 AND 3
            BEGIN
               INSERT INTO #TEMP(deductorMasterTan,openingAmount,adjusted,closingAmount,deducteePan,
                                 deducteeName,postingDateOfDocument,tdsAmount,utilizedTdsAmount,
								 finalTdsRate,finalTdsSection,documentNumber)
               SELECT deductor_master_tan AS deductorMasterTan,SUM(TotalProvisionAmount) AS openingAmount,
                      SUM(TotalProvisionUtilizedAmount) AS adjusted,
                     (SUM(TotalProvisionAmount)-SUM(TotalProvisionUtilizedAmount)) AS closingAmount,
                      deductee_pan AS deducteePan,deductee_name AS deducteeName,
                      posting_date_of_document AS postingDateOfDocument,SUM(tdsAmount) AS tdsAmount,SUM(utilizedTdsAmount) AS utilizedTdsAmount,
					  final_tds_rate,final_tds_section,document_number
            FROM
            ((SELECT deductor_master_tan,ISNULL(SUM(provisional_amount),0) AS TotalProvisionAmount,0 AS TotalProvisionUtilizedAmount ,
                     deductee_pan,deductee_name,posting_date_of_document,
                     ISNULL(SUM(final_tds_amount),0) AS tdsAmount,0 AS utilizedTdsAmount,
					 final_tds_rate,final_tds_section,document_number
            FROM Transactions.provision 
            WHERE assessment_year < @assessment_year AND deductor_master_tan = @deductor_master_tan AND 
                  active = 1 AND (is_parent IS NULL OR is_parent =0) 
            GROUP BY deductor_master_tan,deductee_pan,deductee_name,posting_date_of_document,
			         final_tds_rate,final_tds_section,document_number)
            UNION ALL
			(SELECT deductor_master_tan,ISNULL(SUM(provisional_amount),0) AS TotalProvisionAmount,0 AS TotalProvisionUtilizedAmount,
                    deductee_pan,deductee_name,posting_date_of_document,ISNULL(SUM(final_tds_amount),0) AS tdsAmount,
                    0 AS utilizedTdsAmount,final_tds_rate,final_tds_section,document_number
            FROM Transactions.provision
            WHERE assessment_year = @assessment_year AND deductor_master_tan = @deductor_master_tan AND 
                  active = 1 AND (is_parent IS NULL OR is_parent =0) AND challan_month BETWEEN 4 AND 12 
            GROUP BY deductor_master_tan,deductee_pan,deductee_name,posting_date_of_document,
			         final_tds_rate,final_tds_section,document_number)
			UNION ALL
            (SELECT deductor_master_tan,ISNULL(SUM(provisional_amount),0) AS TotalProvisionAmount,0 AS TotalProvisionUtilizedAmount,
                    deductee_pan,deductee_name,posting_date_of_document,ISNULL(SUM(final_tds_amount),0) AS tdsAmount,
                    0 AS utilizedTdsAmount,final_tds_rate,final_tds_section,document_number
            FROM Transactions.provision
            WHERE assessment_year = @assessment_year AND deductor_master_tan = @deductor_master_tan AND 
                  active = 1 AND (is_parent IS NULL OR is_parent =0) AND challan_month <= @month 
            GROUP BY deductor_master_tan,deductee_pan,deductee_name,posting_date_of_document,
			         final_tds_rate,final_tds_section,document_number)
            UNION ALL
            (SELECT P.deductor_master_tan,0 AS TotalProvisionAmount,ISNULL(SUM(PU.utilized_amount),0) AS TotalProvisionUtilizedAmount ,
                    P.deductee_pan,P.deductee_name,P.posting_date_of_document,0 AS tdsAmount,
                    ISNULL(SUM(PU.utilized_tds_amount),0) AS utilizedTdsAmount,final_tds_rate,final_tds_section,document_number
            FROM Transactions.provision P
            INNER JOIN Transactions.provision_utilization PU ON P.provision_id = PU.provision_master_id
            WHERE P.assessment_year < @assessment_year AND P.deductor_master_tan = @deductor_master_tan AND 
                  P.active = 1 AND (P.is_parent IS NULL OR P.is_parent =0) AND PU.assessment_year < @assessment_year AND 
                  PU.deductor_master_tan = @deductor_master_tan AND PU.active = 1
            GROUP BY P.deductor_master_tan,P.deductee_pan,P.deductee_name,P.posting_date_of_document,
			         final_tds_rate,final_tds_section,document_number)
            UNION ALL
			(SELECT P.deductor_master_tan,0 AS TotalProvisionAmount,ISNULL(SUM(PU.utilized_amount),0) AS TotalProvisionUtilizedAmount,
                    P.deductee_pan,P.deductee_name,P.posting_date_of_document,0 AS tdsAmount,
                    ISNULL(SUM(PU.utilized_tds_amount),0) AS utilizedTdsAmount,final_tds_rate,final_tds_section,document_number
            FROM Transactions.provision P
            INNER JOIN Transactions.provision_utilization PU ON P.provision_id = PU.provision_master_id 
            WHERE P.assessment_year = @assessment_year AND P.deductor_master_tan = @deductor_master_tan AND 
                  P.active = 1 AND (P.is_parent IS NULL OR P.is_parent =0) AND P.challan_month BETWEEN 4 AND 12 AND
                  PU.assessment_year = @assessment_year AND PU.deductor_master_tan = @deductor_master_tan AND 
                  PU.active = 1 AND PU.challan_month BETWEEN 4 AND 12
            GROUP BY P.deductor_master_tan,P.deductee_pan,P.deductee_name,P.posting_date_of_document,
			         final_tds_rate,final_tds_section,document_number)
			UNION ALL
            (SELECT P.deductor_master_tan,0 AS TotalProvisionAmount,ISNULL(SUM(PU.utilized_amount),0) AS TotalProvisionUtilizedAmount,
                    P.deductee_pan,P.deductee_name,P.posting_date_of_document,0 AS tdsAmount,
                    ISNULL(SUM(PU.utilized_tds_amount),0) AS utilizedTdsAmount,final_tds_rate,final_tds_section,document_number
            FROM Transactions.provision P
            INNER JOIN Transactions.provision_utilization PU ON P.provision_id = PU.provision_master_id 
            WHERE P.assessment_year = @assessment_year AND P.deductor_master_tan = @deductor_master_tan AND 
                  P.active = 1 AND (P.is_parent IS NULL OR P.is_parent =0) AND P.challan_month <= @month AND
                  PU.assessment_year = @assessment_year AND PU.deductor_master_tan = @deductor_master_tan AND 
                  PU.active = 1 AND PU.challan_month <= @month
            GROUP BY P.deductor_master_tan,P.deductee_pan,P.deductee_name,P.posting_date_of_document,
			         final_tds_rate,final_tds_section,document_number)) A
            GROUP BY deductor_master_tan,deductee_pan,deductee_name,posting_date_of_document,
			         final_tds_rate,final_tds_section,document_number
            
            SELECT * FROM #TEMP
            
            END
                            ]]>
					</value>
				</entry>
				<entry key="get_advance_closing_and_opening_matrix_report">
					<value>
                            <![CDATA[
 								DECLARE @month INT = :month,
@assessment_year INT = :year,
@deductor_master_tan VARCHAR(25) = :deductorMasterTan
CREATE TABLE #TEMP
(deductorMasterTan VARCHAR(25),
openingAmount DECIMAL(30,2),
adjusted DECIMAL(30,2),
closingAmount DECIMAL(30,2),
deducteePan VARCHAR(25),
deducteeName VARCHAR(256),
postingDateOfDocument DATETIME,
tdsAmount DECIMAL(30,2),
utilizedTdsAmount DECIMAL(30,6),
finalTdsRate DECIMAL(30,6),
finalTdsSection VARCHAR(15),
documentNumber VARCHAR(25) );
IF @month BETWEEN 4 AND 12
BEGIN
INSERT INTO #TEMP(deductorMasterTan,openingAmount,adjusted,closingAmount,deducteePan,
deducteeName,postingDateOfDocument,tdsAmount,utilizedTdsAmount,
finalTdsRate,finalTdsSection,documentNumber)
SELECT deductor_master_tan AS deductorMasterTan,SUM(TotalAdvanceAmount) AS openingAmount,
SUM(TotalAdvanceUtilizedAmount) AS adjusted,
(SUM(TotalAdvanceAmount)-SUM(TotalAdvanceUtilizedAmount)) AS closingAmount,
deductee_pan AS deducteePan,deductee_name AS deducteeName,
posting_date_of_document AS postingDateOfDocument,SUM(tdsAmount) AS tdsAmount,SUM(utilizedTdsAmount) AS utilizedTdsAmount,
final_tds_rate,final_tds_section,document_number
FROM
((SELECT deductor_master_tan,ISNULL(SUM(amount),0) AS TotalAdvanceAmount,0 AS TotalAdvanceUtilizedAmount ,
deductee_pan,deductee_name,posting_date_of_document,
ISNULL(SUM(final_tds_amount),0) AS tdsAmount, 0 AS utilizedTdsAmount,
final_tds_rate,final_tds_section,document_number
FROM Transactions.advance
WHERE assessment_year < @assessment_year AND deductor_master_tan = @deductor_master_tan AND
active = 1 AND (is_parent IS NULL OR is_parent =0)
GROUP BY deductor_master_tan,deductee_pan,deductee_name,posting_date_of_document,
final_tds_rate,final_tds_section,document_number)
UNION ALL
(SELECT deductor_master_tan,ISNULL(SUM(amount),0) AS TotalAdvanceAmount,0 AS TotalAdvanceUtilizedAmount,
deductee_pan,deductee_name,posting_date_of_document,ISNULL(SUM(final_tds_amount),0) AS tdsAmount,
0 AS utilizedTdsAmount,final_tds_rate,final_tds_section,document_number
FROM Transactions.advance
WHERE assessment_year = @assessment_year AND deductor_master_tan = @deductor_master_tan AND
active = 1 AND (is_parent IS NULL OR is_parent =0) AND challan_month <= @month AND challan_month BETWEEN 4 AND 12
GROUP BY deductor_master_tan,deductee_pan,deductee_name,posting_date_of_document,
final_tds_rate,final_tds_section,document_number)
UNION ALL
(SELECT A.deductor_master_tan,0 AS TotalAdvanceAmount,ISNULL(SUM(AU.utilized_amount),0) AS TotalAdvanceUtilizedAmount ,
A.deductee_pan,A.deductee_name,A.posting_date_of_document,
0 AS tdsAmount,ISNULL(SUM(AU.utilized_tds_amount),0) AS utilizedTdsAmount,
final_tds_rate,final_tds_section,document_number
FROM Transactions.advance A
INNER JOIN Transactions.advance_utilization AU ON A.advance_id = AU.advance_master_id
WHERE A.assessment_year < @assessment_year AND A.deductor_master_tan = @deductor_master_tan AND
A.active = 1 AND (A.is_parent IS NULL OR A.is_parent =0) AND AU.assessment_year < @assessment_year AND
AU.deductor_master_tan = @deductor_master_tan AND AU.active = 1
GROUP BY A.deductor_master_tan,A.deductee_pan,A.deductee_name,A.posting_date_of_document,
final_tds_rate,final_tds_section,document_number)
UNION ALL
(SELECT A.deductor_master_tan,0 AS TotalAdvanceAmount,ISNULL(SUM(AU.utilized_amount),0) AS TotalAdvanceUtilizedAmount,
A.deductee_pan,A.deductee_name,A.posting_date_of_document,0 AS tdsAmount,ISNULL(SUM(AU.utilized_tds_amount),0) AS utilizedTdsAmount,
final_tds_rate,final_tds_section,document_number
FROM Transactions.advance A
INNER JOIN Transactions.advance_utilization AU ON A.advance_id = AU.advance_master_id
WHERE A.assessment_year = @assessment_year AND A.deductor_master_tan = @deductor_master_tan AND
A.active = 1 AND (A.is_parent IS NULL OR A.is_parent =0) AND A.challan_month <= @month AND
AU.assessment_year = @assessment_year AND AU.deductor_master_tan = @deductor_master_tan AND
AU.active = 1 AND AU.challan_month <= @month AND A.challan_month BETWEEN 4 AND 12 AND AU.challan_month BETWEEN 4 AND 12
GROUP BY A.deductor_master_tan,A.deductee_pan,A.deductee_name,A.posting_date_of_document,
final_tds_rate,final_tds_section,document_number)) A
GROUP BY deductor_master_tan,deductee_pan,deductee_name,posting_date_of_document,
final_tds_rate,final_tds_section,document_number
SELECT * FROM #TEMP
END
IF @month BETWEEN 1 AND 3
BEGIN
INSERT INTO #TEMP(deductorMasterTan,openingAmount,adjusted,closingAmount,deducteePan,
deducteeName,postingDateOfDocument,tdsAmount,utilizedTdsAmount,
finalTdsRate,finalTdsSection,documentNumber)
SELECT deductor_master_tan AS deductorMasterTan,SUM(TotalAdvanceAmount) AS openingAmount,
SUM(TotalAdvanceUtilizedAmount) AS adjusted,
(SUM(TotalAdvanceAmount)-SUM(TotalAdvanceUtilizedAmount)) AS closingAmount,
deductee_pan AS deducteePan,deductee_name AS deducteeName,
posting_date_of_document AS postingDateOfDocument,SUM(tdsAmount) AS tdsAmount,SUM(utilizedTdsAmount) AS utilizedTdsAmount,
final_tds_rate,final_tds_section,document_number
FROM
((SELECT deductor_master_tan,ISNULL(SUM(amount),0) AS TotalAdvanceAmount,0 AS TotalAdvanceUtilizedAmount ,
deductee_pan,deductee_name,posting_date_of_document,
ISNULL(SUM(final_tds_amount),0) AS tdsAmount,0 AS utilizedTdsAmount,
final_tds_rate,final_tds_section,document_number
FROM Transactions.advance
WHERE assessment_year < @assessment_year AND deductor_master_tan = @deductor_master_tan AND
active = 1 AND (is_parent IS NULL OR is_parent =0)
GROUP BY deductor_master_tan,deductee_pan,deductee_name,posting_date_of_document,
final_tds_rate,final_tds_section,document_number)
UNION ALL
(SELECT deductor_master_tan,ISNULL(SUM(amount),0) AS TotalAdvanceAmount,0 AS TotalAdvanceUtilizedAmount ,
deductee_pan,deductee_name,posting_date_of_document,
ISNULL(SUM(final_tds_amount),0) AS tdsAmount,0 AS utilizedTdsAmount,
final_tds_rate,final_tds_section,document_number
FROM Transactions.advance
WHERE assessment_year = @assessment_year AND deductor_master_tan = @deductor_master_tan AND
active = 1 AND (is_parent IS NULL OR is_parent =0) AND challan_month BETWEEN 4 AND 12
GROUP BY deductor_master_tan,deductee_pan,deductee_name,posting_date_of_document,
final_tds_rate,final_tds_section,document_number)
UNION ALL
(SELECT deductor_master_tan,ISNULL(SUM(amount),0) AS TotalAdvanceAmount,0 AS TotalAdvanceUtilizedAmount,
deductee_pan,deductee_name,posting_date_of_document,ISNULL(SUM(final_tds_amount),0) AS tdsAmount,0 AS utilizedTdsAmount,
final_tds_rate,final_tds_section,document_number
FROM Transactions.advance
WHERE assessment_year = @assessment_year AND deductor_master_tan = @deductor_master_tan AND
active = 1 AND (is_parent IS NULL OR is_parent =0) AND challan_month <= @month
GROUP BY deductor_master_tan,deductee_pan,deductee_name,posting_date_of_document,
final_tds_rate,final_tds_section,document_number)
UNION ALL
(SELECT A.deductor_master_tan,0 AS TotalAdvanceAmount,ISNULL(SUM(AU.utilized_amount),0) AS TotalAdvanceUtilizedAmount ,
A.deductee_pan,A.deductee_name,A.posting_date_of_document,0 AS tdsAmount,ISNULL(SUM(AU.utilized_tds_amount),0) AS utilizedTdsAmount,
final_tds_rate,final_tds_section,document_number
FROM Transactions.advance A
INNER JOIN Transactions.advance_utilization AU ON A.advance_id = AU.advance_master_id
WHERE A.assessment_year < @assessment_year AND A.deductor_master_tan = @deductor_master_tan AND
A.active = 1 AND (A.is_parent IS NULL OR A.is_parent =0) AND AU.assessment_year < @assessment_year AND
AU.deductor_master_tan = @deductor_master_tan AND AU.active = 1
GROUP BY A.deductor_master_tan,A.deductee_pan,A.deductee_name,A.posting_date_of_document,
final_tds_rate,final_tds_section,document_number)
UNION ALL
(SELECT A.deductor_master_tan,0 AS TotalAdvanceAmount,ISNULL(SUM(AU.utilized_amount),0) AS TotalAdvanceUtilizedAmount ,
A.deductee_pan,A.deductee_name,A.posting_date_of_document,0 AS tdsAmount,ISNULL(SUM(AU.utilized_tds_amount),0) AS utilizedTdsAmount,
final_tds_rate,final_tds_section,document_number
FROM Transactions.advance A
INNER JOIN Transactions.advance_utilization AU ON A.advance_id = AU.advance_master_id
WHERE A.assessment_year = @assessment_year AND A.deductor_master_tan = @deductor_master_tan AND
A.active = 1 AND (A.is_parent IS NULL OR A.is_parent =0) AND AU.assessment_year = @assessment_year AND
AU.deductor_master_tan = @deductor_master_tan AND AU.active = 1 AND A.challan_month BETWEEN 4 AND 12 AND
AU.challan_month BETWEEN 4 AND 12
GROUP BY A.deductor_master_tan,A.deductee_pan,A.deductee_name,A.posting_date_of_document,
final_tds_rate,final_tds_section,document_number)
UNION ALL
(SELECT A.deductor_master_tan,0 AS TotalAdvanceAmount,ISNULL(SUM(AU.utilized_amount),0) AS TotalAdvanceUtilizedAmount,
A.deductee_pan,A.deductee_name,A.posting_date_of_document,0 AS tdsAmount,ISNULL(SUM(AU.utilized_tds_amount),0) AS utilizedTdsAmount,
final_tds_rate,final_tds_section,document_number
FROM Transactions.advance A
INNER JOIN Transactions.advance_utilization AU ON A.advance_id = AU.advance_master_id
WHERE A.assessment_year = @assessment_year AND A.deductor_master_tan = @deductor_master_tan AND
A.active = 1 AND (A.is_parent IS NULL OR A.is_parent =0) AND A.challan_month <= @month AND
AU.assessment_year = @assessment_year AND AU.deductor_master_tan = @deductor_master_tan AND
AU.active = 1 AND AU.challan_month <= @month
GROUP BY A.deductor_master_tan,A.deductee_pan,A.deductee_name,A.posting_date_of_document,
final_tds_rate,final_tds_section,document_number)) A
GROUP BY deductor_master_tan,deductee_pan,deductee_name,posting_date_of_document,
final_tds_rate,final_tds_section,document_number
SELECT * FROM #TEMP
END 
                             ]]>
					</value>
				</entry>
				<entry
					key="get_ProvisionLineItems_ReceiptSerialNo_And_BSRCode_And_ReceiptDate">
					<value>
                            <![CDATA[SELECT * FROM Transactions.provision WHERE 
        assessment_year = :assessmentYear and deductor_master_tan = :deductorTan and receipt_bsr_code=:bsrCode
        and challan_serial_no=:receiptSerailNo and challan_paid_date=:receiptDate and active=1 and 
        is_resident=:isForNonResidents and challan_paid=:challanPaid and is_parent = 0 
        and (final_tds_amount > 0 OR ldc_certificate_number is not null)  and provisional_amount > 0 ;
                            ]]>
					</value>
				</entry>
				<entry key="get_advance_by_advanceId">
					<value>
                            <![CDATA[SELECT * FROM Transactions.advance WHERE advance_id= :advanceId ]]>
					</value>
				</entry>
				<entry key="find_advance_By_Year_Tan_Document_PostingDate_Id">
					<value>
						<![CDATA[ SELECT * FROM Transactions.advance WHERE assessment_year=:year AND deductor_master_tan=:tan AND advance_id=:id  ]]>
					</value>
				</entry>
				<entry key="find_provision_By_Year_Tan_Id">
					<value>
						<![CDATA[ SELECT * FROM Transactions.provision WHERE assessment_year=:year AND deductor_master_tan=:tan AND 
							provision_id=:id; ]]>
					</value>
				</entry>
				<entry key="get_adhoc_count">
					<value>
						<![CDATA[ SELECT COUNT(1) FROM  Transactions.provision WHERE deductor_master_tan = :tan AND document_type = :type AND
 							(is_parent is null or is_parent =0) AND active = 0 ]]>
					</value>
				</entry>
				<entry key="get_adhoc_list">
					<value>
						<![CDATA[ SELECT * FROM Transactions.provision WHERE deductor_master_tan = :tan AND document_type = :type AND
 								(is_parent is null or is_parent =0) AND active = 0 ]]>
					</value>
				</entry>
				<entry key="get_count_tds_calations">
					<value>
						<![CDATA[ SELECT count(1) FROM Transactions.provision WHERE deductor_master_tan = :tans AND mismatch = :mismatch AND 
						created_date >= :firstDate AND created_date <= :lastDate ]]>
					</value>
				</entry>
				<entry key="res_nr_count">
					<value>
						<![CDATA[ SELECT COUNT(1) FROM Transactions.provision WHERE assessment_year = :year AND challan_month = :month AND 
								deductor_master_tan = :tan AND is_resident = :residentType AND (is_parent is null or is_parent =0) ]]>
					</value>
				</entry>
				<entry key="active_res_nr_count">
					<value>
						<![CDATA[ SELECT COUNT(1) FROM Transactions.provision WHERE assessment_year = :year AND challan_month = :month AND 
								deductor_master_tan = :tan AND is_resident = :residentType AND (is_parent is null or is_parent =0) AND active = 1 ]]>
					</value>
				</entry>
				<entry key="deductee_res_nr_count">
					<value>
						<![CDATA[ SELECT COUNT(1) FROM  Transactions.provision WHERE assessment_year = :year AND challan_month = :month AND 
							deductor_master_tan = :tan AND is_resident = :residentType AND (is_parent is null or is_parent =0) AND deductee_name like :deducteeName ]]>
					</value>
				</entry>
				<entry key="active_deductee_res_nr_count">
					<value>
						<![CDATA[ SELECT COUNT(1) FROM  Transactions.provision WHERE assessment_year = :year AND challan_month = :month AND 
								deductor_master_tan = :tan AND is_resident = :residentType AND (is_parent is null or is_parent =0) AND active = 1 AND deductee_name like :deducteeName ]]>
					</value>
				</entry>
				<entry key="get_all_res_nr_deductees">
					<value>
						<![CDATA[ SELECT * FROM  Transactions.provision WHERE assessment_year = :year AND challan_month = :month AND 
								deductor_master_tan = :tan AND is_resident = :residentType AND (is_parent is null or is_parent =0) AND deductee_name like :deducteeName ]]>
					</value>
				</entry>
				<entry key="active_get_all_res_nr_deductees">
					<value>
						<![CDATA[ SELECT * FROM  Transactions.provision WHERE assessment_year = :year AND challan_month = :month AND deductor_master_tan = :tan
							 AND is_resident = :residentType AND (is_parent is null or is_parent =0) AND active = 1 AND deductee_name like :deducteeName ]]>
					</value>
				</entry>
				<entry key="get_all_res_nr">
					<value>
						<![CDATA[ SELECT * FROM  Transactions.provision WHERE assessment_year = :year AND challan_month = :month AND 
								deductor_master_tan = :tan AND is_resident = :residentType AND (is_parent is null or is_parent =0) ]]>
					</value>
				</entry>
				<entry key="active_get_all_res_nr">
					<value>
						<![CDATA[ SELECT * FROM  Transactions.provision WHERE assessment_year = :year AND challan_month = :month AND deductor_master_tan = :tan
							 AND is_resident = :residentType AND (is_parent is null or is_parent =0) AND active = 1 ]]>
					</value>
				</entry>
				<entry key="get_count_1">
					<value>
						<![CDATA[SELECT ISNULL(SUM(utilized_amount),0) FROM Transactions.ldc_utilization WHERE assessment_year<:assessmentYear AND deductor_master_tan=
						:deductorTan AND ldc_master_id=:ldcMasterId AND active=1]]>
					</value>
				</entry>
				<entry key="get_count_2">
					<value>
						<![CDATA[SELECT ISNULL(SUM(utilized_amount),0) FROM Transactions.ldc_utilization WHERE assessment_year=:assessmentYear AND deductor_master_tan=
						:deductorTan AND challan_month<4 AND ldc_master_id=:ldcMasterId AND active=1]]>
					</value>
				</entry>
				<entry key="get_Total_OpeningAmount_For_Month">
					<value>
						<![CDATA[SELECT ISNULL(SUM(utilized_amount),0) FROM Transactions.ldc_utilization WHERE assessment_year=:assessmentYear AND deductor_master_tan=
				:deductorTan AND ldc_master_id=:ldcMasterId AND challan_month=:month AND active=1]]>
					</value>
				</entry>
				<entry key="tcs_find_batchId_tan_mismatch">
					<value>
						<![CDATA[ SELECT * FROM Transactions.tcs_invoice_line_item WHERE collector_tan IN(:tan) 
						AND batch_upload_id = :batchId AND mismatch_category = :mismatchType 
						AND is_adjust = 0 AND is_error = 0
						AND (is_parent is null or is_parent =0) AND active = 0 AND has_mismatch = 1 ]]>
					</value>
				</entry>
				<entry key="tcs_find_batchId_tan_mismatch_count">
					<value>
						<![CDATA[ SELECT count(1) FROM Transactions.tcs_invoice_line_item WHERE collector_tan IN(:tan) 
						AND batch_upload_id = :batchId AND mismatch_category = :mismatchType 
						AND is_adjust = 0 AND is_error = 0
						AND (is_parent is null or is_parent =0) AND active = 0 AND has_mismatch = 1 ]]>
					</value>
				</entry>
				<entry key="tcs_get_invoice_by_type">
					<value>
						<![CDATA[ SELECT * FROM Transactions.tcs_invoice_line_item WHERE collector_tan = :tan AND assessment_year = :year AND 
								document_type = :type AND active = 0 AND (is_parent is null or is_parent =0) AND challan_month = :month ]]>
					</value>
				</entry>
				<entry key="tcs_get_invoce_by_type_count">
					<value>
						<![CDATA[ SELECT COUNT(1) FROM Transactions.tcs_invoice_line_item WHERE assessment_year= :year AND collector_tan = :tan AND document_type = :type
								  AND active = 0 AND challan_month = :month ]]>
					</value>
				</entry>
				<entry key="tcs_get_invoice_based_on_tan_year">
					<value>
						<![CDATA[ SELECT * FROM Transactions.tcs_invoice_line_item WHERE assessment_year = :year AND collector_tan = :tan ]]>
					</value>
				</entry>
				<entry key="tcs_get_all_invoice_based_on_tan_year">
					<value>
							<![CDATA[ SELECT * FROM Transactions.tcs_invoice_line_item WHERE assessment_year = :year AND collector_tan = :tan  ]]>
					</value>
				</entry>
				<entry key="tcs_get_tcs_calculation_status">
					<value>
						<![CDATA[ SELECT COUNT(1) FROM Transactions.tcs_invoice_line_item WHERE assessment_year IN(:previousYear,:currentYear,:nextYear) AND
								collector_tan = :tan AND has_mismatch = :isMismatch AND created_date >= :startDate AND created_date <= :endDate ]]>
					</value>
				</entry>
				<entry key="tcs_find_by_id_active">
					<value>
						<![CDATA[ SELECT * FROM Transactions.tcs_invoice_line_item WHERE assessment_year= :year AND collector_tan= :tan AND 
						id= :id AND active= :activeFlag ]]>
					</value>
				</entry>
				<entry key="tcs_find_all_tan_year">
					<value>
						<![CDATA[ SELECT * FROM Transactions.tcs_invoice_line_item WHERE collector_tan = :collectorTan AND assessment_year = :assessmentYear AND active = 1]]>
					</value>
				</entry>
				<entry key="tcs_invoice_collectees">
					<value>
						<![CDATA[SELECT * FROM Transactions.tcs_invoice_line_item WHERE assessment_year = :assessmentYear AND collector_tan = :tan AND 
 								challan_month = :month AND (is_parent is null or is_parent =0) AND has_payment = 0 AND active = 1 ]]>
					</value>
				</entry>
				<entry key="tcs_get_invoice_challan_month_tan_year">
					<value>
						<![CDATA[ SELECT * FROM Transactions.tcs_invoice_line_item WHERE assessment_year = :assessmentYear AND challan_month IN(:listChallanMonth) AND 
		    		   				collector_tan IN(:collectorTan) AND challan_paid = :challanPaid AND active=1 ]]>
					</value>
				</entry>
				<entry key="tcs_update_Invoice_line_item_mismatch">
					<value>
							<![CDATA[ 
						UPDATE Transactions.tcs_invoice_line_item SET 
							surcharge_amount = :surchargeAmount, itcess_amount = :itcessAmount, action = :action,
							final_tcs_amount = :finalTcsAmount, final_tcs_rate = :finalTcsRate, final_tcs_section = :finalTcsSection,
							has_mismatch = :hasMismatch,
							active = :active, is_exempted = :isExempted,nature_of_income=:natureOfIncome,
							noi_id=:natureOfIncomeId,final_reason=:finalReason WHERE id = :id
				 ]]>
					</value>
				</entry>

				<entry key="tcs_update_Invoice_line_item">
					<value>
							<![CDATA[ UPDATE Transactions.tcs_invoice_line_item SET source_identifier = :sourceIdentifier, source_file_name = :sourceFileName, collector_code = :collectorCode,
									collector_pan = :collectorPan, collector_tan = :collectorTan, collector_gstin = :collectorGstin, collectee_code = :collecteeCode, collectee_pan = :collecteePan,
									collectee_gstin = :collecteeGstin, document_type = :documentType, supply_type = :supplyType, document_number = :documentNumber, document_date = :documentDate,
									original_document_number = :originalDocumentNumber, original_document_date = :originalDocumentDate, accounting_document_number = :accountingDocumentNumber,
									posting_date = :postingDate, line_number = :lineNumber, hsn_or_sac = :hsnOrSac, hsn_or_sac_desc = :hsnOrSacDesc, invoice_desc = :invoiceDesc, 
									so_desc = :soDesc, gl_account_code = :glAccountCode, gl_desc = :glDesc, taxable_value = :taxableValue, igst_amount = :igstAmount, cgst_amount = :cgstAmount,
									sgst_amount = :sgstAmount, discount = :discount, invoice_value = :invoiceValue, tcs_section = :tcsSection, tcs_rate = :tcsRate, tcs_amount = :tcsAmount, 
									surcharge_rate = :surchargeRate, surcharge_amount = :surchargeAmount, itcess_rate = :itcessRate, itcess_amount = :itcessAmount, action = :action,
									challan_generated_date = :challanGeneratedDate, is_challan_generated = :isChallanGenerated, challan_month = :challanMonth, challan_paid = :challanPaid, 
									confidence = :confidence, date_at_which_tds_is_deposited = :dateAtWhichTdsIsDeposited, approved_for_challan = :approvedForChallan,
									payment_applied_on = :paymentAppliedOn, payment_is_split_record = :paymentIsSplitRecord, actual_tcs_amount = :actualTcsAmount, actual_tcs_rate = :actualTcsRate,
									actual_tcs_section = :actualTcsSection, derived_tcs_amount = :derivedTcsAmount, derived_tcs_rate = :derivedTcsRate, derived_tcs_section = :derivedTcsSection,
									final_tcs_amount = :finalTcsAmount, final_tcs_rate = :finalTcsRate, final_tcs_section = :finalTcsSection, has_payment = :hasPayment, has_lcc = :hasLcc,
									has_mismatch = :hasMismatch, mismatch_category = :mismatchCategory, mismatch_interpretation = :mismatchInterpretation, mismatch_modified_date = :mismatchModifiedDate,
									is_lcc_split_record = :isLccSplitRecord, is_parent = :isParent, linked_payment_number = :linkedPaymentNumber, keywords = :keywords, user_defined_field1 = :userDefinedField1,
									user_defined_field2 = :userDefinedField2, user_defined_field3 = :userDefinedField3, user_defined_field4 = :userDefinedField4, user_defined_field5 = :userDefinedField5,
									user_defined_field6 = :userDefinedField6, user_defined_field7 = :userDefinedField7, user_defined_field8 = :userDefinedField8, assessment_year = :assessmentYear,
									collectee_name = :collecteeName, active = :active, is_exempted = :isExempted,nature_of_income=:natureOfIncome,noi_id=:natureOfIncomeId,final_reason=:finalReason WHERE id = :id  ]]>
					</value>
				</entry>
				<entry key="tcs_find_posting_date_tan_year_active">
					<value>
								<![CDATA[ SELECT * FROM Transactions.tcs_invoice_line_item WHERE assessment_year = :year AND collector_tan = :tan AND 
									id = :id AND active = :activeFlag  ]]>
					</value>
				</entry>
				<entry key="tcs_find_invoice_year_tan_ids">
					<value>
								<![CDATA[ SELECT * FROM Transactions.tcs_invoice_line_item WHERE assessment_year = :year AND collector_tan = :tan AND 
									id IN(:id) AND active = :activeFlag  ]]>
					</value>
				</entry>
				<entry key="get_all_invoice_mismatch_page">
					<value>
								<![CDATA[ SELECT * FROM Transactions.tcs_invoice_line_item WHERE assessment_year = :year AND has_mismatch = 1 AND active = 0  
											AND challan_month = :month AND collector_tan = :tan ]]>
					</value>
				</entry>
				<entry key="tcs_get_total_value_by_batch_id">
					<value>
					<![CDATA[ SELECT SUM( %1$s ) FROM Transactions.tcs_invoice_line_item WHERE  collector_tan=:tan AND batch_upload_id =:batchId AND
							has_mismatch = 1 AND active = 0 AND (is_parent is null or is_parent =0) AND mismatch_category= :type ]]>
					</value>
				</entry>
				<entry key="tcs_get_invoice_mismatch_amounts">
					<value>
					<![CDATA[ SELECT COALESCE(SUM(invoice_value),0) as total_sum ,COALESCE(SUM(derived_tcs_amount),0) as derived_tcs_sum ,
							COALESCE(SUM(actual_tcs_amount),0) as actual_tcs_sum, count(*) as mismatch_count
							FROM Transactions.tcs_invoice_line_item WHERE  collector_tan=:tan  
							AND is_adjust = 0 AND is_error = 0 AND 
							has_mismatch = 1 AND active = 0 AND (is_parent is null or is_parent=0) AND mismatch_category= :type]]>
					</value>
				</entry>
				<entry key="tcs_get_total_value_year_month">
					<value>
						<![CDATA[ SELECT SUM(%1$s) FROM Transactions.tcs_invoice_line_item WHERE assessment_year = :assessmentYear AND collector_tan = :tan
									AND challan_month = :assessmentMonth AND has_mismatch = 1 AND active = 0 AND (is_parent is null or is_parent =0) AND mismatch_category = :type ]]>
					</value>
				</entry>
				<entry key="tcs_find_all_non_resident">
					<value>
						<![CDATA[ SELECT * FROM Transactions.tcs_invoice_line_item WHERE assessment_year=:year AND collector_tan = :collectorTan AND 
	 								challan_month = :month AND (is_parent is null or is_parent =0) AND has_payment = 0 AND active = 1 ]]>
					</value>
				</entry>
				<entry key="tcs_find_all_resident">
					<value>
						<![CDATA[ SELECT * FROM Transactions.tcs_invoice_line_item WHERE assessment_year = :year AND collector_tan = :collectorTan AND 
		 							challan_month = :month AND (is_parent is null or is_parent =0) AND has_payment = 0 AND active = 1  ]]>
					</value>
				</entry>
				<entry key="tcs_find_non_resident_count">
					<value>
							<![CDATA[ SELECT COUNT(1) FROM Transactions.tcs_invoice_line_item WHERE assessment_year = :year AND collector_tan = :tan AND 
				 					challan_month = :month AND (is_parent is null or is_parent =0) AND has_payment = 0 AND active = 1 ]]>
					</value>
				</entry>
				<entry key="tcs_find_resident_count">
					<value>
							<![CDATA[ SELECT COUNT(1) FROM Transactions.tcs_invoice_line_item WHERE assessment_year = :year AND collector_tan = :collectorTan AND 
				 					challan_month = :month AND (is_parent is null or is_parent =0) AND has_payment = 0 AND active = 1  ]]>
					</value>
				</entry>
				<entry key="tcs_find_resident_name_count">
					<value>
							<![CDATA[ SELECT COUNT(1) FROM Transactions.tcs_invoice_line_item WHERE assessment_year = :year AND collector_tan = :collectorTan AND 
				 					challan_month = :month AND (is_parent is null or is_parent =0)AND collectee_name = :collecteeName AND has_payment = 0 AND active = 1  ]]>
					</value>
				</entry>
				<entry key="tcs_find_non_resident_count">
					<value>
						<![CDATA[ SELECT COUNT(1) FROM Transactions.tcs_invoice_line_item WHERE assessment_year = :year AND collector_tan = :collectorTan AND 
				 				challan_month = :month AND (is_parent is null or is_parent =0) AND collectee_name = :collecteeName AND has_payment = 0 AND active = 1]]>
					</value>
				</entry>
				<entry key="tcs_find_resident_by_collecctee">
					<value>
						<![CDATA[ SELECT * FROM Transactions.tcs_invoice_line_item WHERE assessment_year = :year AND collector_tan = :collectorTan AND 
				 				challan_month = :month AND (is_parent is null or is_parent =0) AND collectee_name = :collecteeName AND has_payment = 0 AND active = 1 ]]>
					</value>
				</entry>
				<entry
					key="get_tcs_invoices_by_year_month_by_tan_mismatch_category">
					<value>
						<![CDATA[ SELECT * FROM Transactions.tcs_invoice_line_item WHERE assessment_year = :year AND collector_tan = :tan AND 
								challan_month = :challanMonth AND has_mismatch = 1 AND active = 0 AND mismatch_category = :mismatchCategory AND (is_parent is null or is_parent =0) %1$s ]]>
					</value>
				</entry>
				<entry
					key="get_tcs_invoices_by_year_month_by_tan_mismatch_category_count">
					<value>
						<![CDATA[ SELECT COUNT(1) FROM Transactions.tcs_invoice_line_item WHERE assessment_year = :year AND collector_tan = :tan AND 
									challan_month = :challanMonth AND has_mismatch = 1 AND active = 0 AND mismatch_category = :mismatchCategory AND (is_parent is null or is_parent =0) ]]>
					</value>
				</entry>
				<entry key="tcs_find_invoice_by_year_tan_posting_date">
					<value>
						<![CDATA[ SELECT * FROM Transactions.tcs_invoice_line_item WHERE assessment_year = :year AND collector_tan = :tan AND 
						id = :id AND posting_date = :postingDate AND active = 1 ]]>
					</value>
				</entry>
				<entry key="tcs_get_invoice_current_month">
					<value>
						<![CDATA[ SELECT * FROM Transactions.tcs_invoice_line_item WHERE assessment_year = :assessmentYear AND collector_tan = :tan AND 
									challan_month = :month AND document_type = 'INV' AND active = 1 AND (is_parent is null or is_parent =0)
									AND has_mismatch = 0 AND collectee_name = :collecteeName ]]>
					</value>
				</entry>
				<entry key="tcs_get_invoice_current_month_count">
					<value>
						<![CDATA[ SELECT COUNT(1) FROM Transactions.tcs_invoice_line_item WHERE assessment_year = :assessmentYear AND collector_tan = :tan AND 
									challan_month = :month AND document_type = 'INV' AND active = 1 AND (is_parent is null or is_parent =0)
									AND has_mismatch = 0 AND collectee_name = :collecteeName ]]>
					</value>
				</entry>
				<entry key="tcs_fine_year_pan_id">
					<value>
						<![CDATA[ SELECT * FROM Transactions.tcs_invoice_line_item WHERE assessment_year = :year AND collector_tan = :tan AND id = :id ]]>
					</value>
				</entry>
				<entry key="get_collecteeName_by_CollecteeCode">
					<value>
						<![CDATA[ SELECT name_of_the_collectee FROM Client_Masters.collectee_master WHERE collectee_code = :collecteeCode AND collector_tan = :collectorTan AND active =1 ]]>
					</value>
				</entry>
				<entry key="update_batch_upload_group">
					<value>
				           <![CDATA[UPDATE Transactions.batch_upload_group
    						SET total_records_count= :groupTotalRecordCount, 
   							total_processed_records_count= :groupTotalProcessedCount, total_error_records_count= :groupTotalErrorCount
						WHERE batch_upload_group_id = :batchUploadGroupID;
				    ]]>
					</value>
				</entry>
				<entry key="find_All_invoices_by_cr_data">
					<value>
						<![CDATA[ SELECT * FROM Transactions.invoice_line_item WHERE deductor_master_tan=:tan AND document_type IN( 'INV','RNV','DR') AND document_number=:documentNumber  AND 
						        document_posting_date=:documentPostingDate AND has_mismatch =0 AND key_duplicate=0 AND is_parent=0  
 							 ]]>
					</value>
				</entry>
				<entry key="find_All_invoices_count_by_cr_data">
					<value>
						<![CDATA[ SELECT count(1) FROM Transactions.invoice_line_item WHERE deductor_master_tan=:tan AND 
						 document_type = 'INV' AND document_number=:documentNumber AND document_posting_date=:documentPostingDate 
						 AND has_mismatch = 0 AND key_duplicate=0 AND is_parent=0 ]]>
					</value>
				</entry>
				<entry key="get_invoices_key_by_cr_data">
					<value>
						<![CDATA[ SELECT * FROM Transactions.invoice_line_item WHERE deductor_master_tan=:tan AND 
						 document_type IN('INV','RNV','DR') AND document_number=:documentNumber AND document_posting_date=:documentPostingDate 
						 AND has_mismatch = 0 AND key_duplicate=0 AND is_parent=0 ]]>
					</value>
				</entry>
				<entry key="delete_by_id">
					<value>
						<![CDATA[
							UPDATE Transactions.invoice_line_item SET active=0, is_rejected=1, key_duplicate=0, is_parent =0, 
							found_invoice=1 WHERE invoice_line_item_id=:id;
							]]>
					</value>
				</entry>
				<entry key="get_ldc_adjustment_count">
					<value>
						<![CDATA[SELECT COUNT(1) FROM Transactions.ldc_utilization WHERE assessment_year = :assessmentYear AND deductor_master_tan = :deductorTan 
								AND ldc_master_id = :ldcMasterId AND challan_month = :month AND active = 1]]>
					</value>
				</entry>
				<entry key="get_list_ldc_utilization">
					<value>
						<![CDATA[ SELECT * FROM Transactions.ldc_utilization WHERE assessment_year = :assessmentYear AND deductor_master_tan = :deductorTan 
								AND ldc_master_id = :ldcMasterId AND challan_month = :month AND active = 1 ]]>
					</value>
				</entry>
				<entry key="tcs_get_cr_error_records">
					<value>
							<![CDATA[ SELECT * FROM Transactions.tcs_invoice_line_item WHERE assessment_year = :year AND collector_tan = :tan  
								and batch_upload_id =:batchUploadId  and is_error= 1 ]]>
					</value>
				</entry>
				<entry key="get_nature_of_remittance">
					<value>
						<![CDATA[ SELECT * FROM Transactions.nr_transactions_meta WHERE deductor_master_tan = :deductorTan AND assessment_year = :assessmentYear AND
								deductee_code = :deducteeCode AND deductee_name = :deducteeName AND nature_of_payment_or_remittance = :natureOfRemittance AND
								country_to_remittance = :country AND  active = 1 ;]]>
					</value>
				</entry>
				<entry key="find_by_id_transactions_meta">
					<value>
						<![CDATA[ SELECT * FROM Transactions.nr_transactions_meta WHERE deductor_master_tan = :deductorTan AND 
								assessment_year = :assessmentYear AND id = :id AND active = 1 ;]]>
					</value>
				</entry>
				<entry key="invoice_year_pan_name_tan_doc_count">
					<value>
						<![CDATA[ SELECT count(1) FROM Transactions.invoice_line_item WHERE assessment_year = :assessmentYear AND deductor_master_tan = :deductorTan AND 
								document_posting_date = :documentPostingDate AND deductee_key = :deducteeKey AND document_number = :erpDocumentNo AND 
								document_type in('INV') AND vendor_invoice_number = :invoiceNumber AND key_duplicate = 0 AND is_parent = 0  ]]>
					</value>
				</entry>
				<entry key="provision_year_pan_name_tan_doc_count">
					<value>
						<![CDATA[ SELECT count(1) FROM Transactions.provision WHERE assessment_year = :assessmentYear AND deductor_master_tan = :deductorTan AND 
								posting_date_of_document = :documentPostingDate AND deductee_key = :deducteeKey AND document_number = :erpDocumentNo AND 
								document_type in('PROV') AND is_parent = 0  ]]>
					</value>
				</entry>
				<entry key="advance_year_pan_name_tan_doc_count">
					<value>
						<![CDATA[ SELECT count(1) FROM Transactions.advance WHERE assessment_year = :assessmentYear AND deductor_master_tan = :deductorTan AND 
								posting_date_of_document = :documentPostingDate AND deductee_key = :deducteeKey AND document_number = :erpDocumentNo AND 
								document_type in('PROV') AND is_parent = 0  ]]>
					</value>
				</entry>
				<entry key="get_nature_of_remittance">
					<value>
						<![CDATA[ SELECT * FROM Transactions.nr_transactions_meta WHERE deductor_master_tan = :deductorTan AND assessment_year = :assessmentYear AND 
									deductee_code = :deducteeCode AND deductee_name = :deducteeName AND nature_of_payment_or_remittance = :natureOfRemittance
									AND country_to_remittance = :country AND active = 1 ;]]>
					</value>
				</entry>
				<entry key="get_nr_transaction_meta">
					<value>
						<![CDATA[ SELECT * FROM Transactions.invoice_line_item WHERE assessment_year = :assessmentYear AND deductor_master_tan = :deductorTan AND 
									nr_transactions_meta_id = :nrTransactionsMetaId AND key_duplicate = 0 AND is_parent = 0 ]]>
					</value>
				</entry>
				<entry key="provision_pan_code_count">
					<value>
						<![CDATA[ SELECT COUNT(1) FROM Transactions.provision WHERE deductor_master_tan = :deductorTan AND deductee_key =:deducteeKey AND active = 1 AND is_parent = 0  ]]>
					</value>
				</entry>
				<entry key="advance_pan_code_count">
					<value>
						<![CDATA[SELECT COUNT(1) FROM Transactions.advance WHERE deductor_master_tan = :deductorTan AND deductee_key =:deducteeKey AND active = 1 and is_parent = 0  ]]>
					</value>
				</entry>
				<entry key="deductee_key_count">
					<value>
						<![CDATA[SELECT COUNT(1) FROM Client_Masters.deductee_master_non_residential WHERE deductor_master_pan = :deductorPan AND deductee_key = :deducteeKey AND active = 1 ; ]]>
					</value>
				</entry>
				<entry key="update_nrTransactionsMeta">
					<value>
						<![CDATA[ UPDATE Transactions.nr_transactions_meta SET deductor_master_tan = :deductorMasterTan, assessment_year = :assessmentYear, document_posting_date = :documentPostingDate,
								amount_in_foreign_currency = :amountInForeignCurrency, beneficial_owner_of_income = :beneficialOwnerOfIncome, date_of_deduction_of_tax = :dateOfDeductionOfTax,
								date_of_deposit_of_tax = :dateOfDepositOfTax, date_of_remittance = :dateOfRemittance, is_gaar_complaint = :isGAARComplaint, is_mli_or_ppt_slob = :isMliOrPptSlob,
								is_beneficial_ownership_of_declaration = :isBeneficialOwnershipOfDeclaration, is_fixed_base_available = :isFixedBaseAvailable,
								is_fixed_base_available_applicable_from = :isFixedBaseAvailableApplicableFrom, is_fixed_base_available_applicable_to = :isFixedBaseAvailableApplicableTo,
								is_no_fixed_base_declaration = :isNoFixedBaseDeclaration, is_no_pe_document_applicable_from = :isNoPeDocumentApplicableFrom, is_no_pe_document_applicable_to = :isNoPeDocumentApplicableTo,
								is_no_pe_document_available = :isNoPeDocumentAvailable, is_no_poem_of_deductee = :isNoPoemOfDeductee, is_no_poem_applicable_from = :isNoPoemApplicableFrom,
								is_no_poem_applicable_to = :isNoPoemApplicableTo, is_no_poem_available = :isNoPoemAvailable, is_poem_declaration_in_future = :isPoemDeclarationInFuture,
								mli_ppt_condition_satisifed = :mliPptConditionSatisifed, mli_slob_condition_satisifed = :mliSlobConditionSatisifed,
								nature_of_payment_or_remittance = :natureOfPaymentOrRemittance, active = :active, amount_in_inr = :amountInInr, amount_of_incometax = :amountOfIncometax, bsr_code = :bsrCode, certificate_no = :certificateNo, country = :country,
								country_to_remittance = :countryToRemittance, created_by = :createdBy, created_date = :createdDate, currency = :currency, deductee_code = :deducteeCode,
								deductee_name = :deducteeName, deductee_pan = :deducteePan, deductee_status = :deducteeStatus, deductor_pan = :deductorPan,
								eductaion_cess = :eductaionCess, eductaion_fee = :eductaionFee, eductaion_interest = :eductaionInterest, erp_document_no = :erpDocumentNo, 
								is_grossed_up = :isGrossedUp, is_ldc_applied = :isLdcApplied, is_pe_india = :isPeIndia, is_resident = :isResident,
								is_tenf_applicable_from = :isTenfApplicableFrom, is_tenf_applicable_to = :isTenfApplicableTo, is_tenf_available = :isTenfAvailable, is_tenf_future = :isTenfFuture,
								is_trc_applicable_from = :isTrcApplicableFrom, is_trc_applicable_to = :isTrcApplicableTo, is_trc_available = :isTrcAvailable, is_trc_future = :isTrcFuture,
								no_poem_future_date = :noPoemFutureDate, po_date = :poDate, po_number = :poNumber, article_of_dtaa = :articleOfDtaa,
								rate_as_per_incometax = :rateAsPerIncometax, rate_of_ldc = :rateOfLdc, surcharge = :surcharge, tds_amount = :tdsAmount,
								tenf_future_date = :tenfFutureDate, tin = :tin, trc_future_date = :trcFutureDate, vendor_document_date = :vendorDocumentDate,
								vendor_document_no = :vendorDocumentNo, stay_period_financial_year = :stayPeriodFinancialYear tds_amount_in_foreign_currency = :tdsAmountInForeignCurrency
								whether_income_received = :whetherIncomeReceived WHERE id = :id ;]]>
					</value>
				</entry>
				<entry key="update_deductee_master_non_residential">
					<value>
					<![CDATA[ UPDATE Client_Masters.deductee_master_non_residential SET deductee_master_10f_applicable_from = :tenFApplicableFrom,
								deductee_master_10f_applicable_to = :tenFApplicableTo, deductee_master_10f_file_address = :form10fFileAddress,
								active = :active, additional_sections = :additionalSections, advance_transaction_count = :advanceTransactionCount, applicable_from = :applicableFrom,
								applicable_to = :applicableTo, area_locality = :areaLocality, country = :country, country_of_residence = :countryOfResidence, created_by = :createdBy,
								default_rate = :defaultRate, email = :emailAddress, fixed_based_india = :fixedBasedIndia, flat_door_block_no = :flatDoorBlockNo, invoice_transaction_count = :invoiceTransactionCount,
								is_10f_available = :isTenFAvailable, is_eligible_for_multiple_sections = :isDeducteeHasAdditionalSections, is_no_pe_doc_available = :noPEDocumentAvailable,
								is_pe_in_india = :whetherPEInIndia, is_poem_available = :isPOEMavailable, is_trc_available = :isTRCAvailable, isdeductee_transparent = :isDeducteeTransparent, isgrossingup = :isGrossingUp,
								istenf_future = :istenfFuture, istrc_future = :istrcFuture, modified_by = :modifiedBy, modified_date = :modifiedDate, modified_name = :modifiedName, 
								name_building_village = :nameBuildingVillage, no_pe_doc_address = :noPeDocAddress, nr_rate = :nrRate,
								pe_applicable_from = :noPEApplicableFrom, pe_applicable_to = :noPEApplicableTo, pe_file_address = :peFileAddress, phone_number = :phoneNumber, pin_code = :pinCode,
								poem_applicable_from = :poemApplicableFrom, poem_applicable_to = :poemApplicableTo, provision_transaction_count = :provisionTransactionCount,
								rate = :rate, related_party = :relatedParty, road_street_postoffice = :roadStreetPostoffice, section = :section,
								source_file_name = :sourceFileName, source_identifier = :sourceIdentifier, state = :state, tenf_address = :tenfAddress, tenf_country = :tenfCountry,
								tenf_future_date = :tenfFutureDate, tenf_pan = :tenfPan, tenf_period = :tenfPeriod, tenf_status = :tenfStatus, tenf_tin = :tenfTin, tin_unique_identification = :deducteeTin,
								town_city_district = :townCityDistrict, trc_address = :trcAddress, trc_applicable_from = :trcApplicableFrom, trc_applicable_to = :trcApplicableTo,
								trc_country = :trcCountry, trc_file_address = :trcFileAddress, trc_future_date = :trcFutureDate, trc_pan = :trcPan, trc_period = :trcPeriod,
								trc_status = :trcStatus, trc_tin = :trcTin, user_defined_field_1 = :userDefinedField1, user_defined_field_2 = :userDefinedField2, user_defined_field_3 = :userDefinedField3,
								fixedbase_availble_india_applicable_from = :fixedbaseAvailbleIndiaApplicableFrom, fixedbase_availble_india_applicable_to = :fixedbaseAvailbleIndiaApplicableTo,
								is_amount_connected_fixed_base = :isAmountConnectedFixedBase, is_business_carried_in_india = :isBusinessCarriedInIndia, is_fixedbase_availble_india = :isFixedbaseAvailbleIndia,
								is_peamount_document = :isPEdocument, is_peamount_received = :isPEamountReceived, ispeinvoilvedin_purchase_goods = :isPEinvoilvedInPurchaseGoods,
								nr_countryof_residence = :nrCountryofResidence, principles_of_business_place = :principlesOfBusinessPlace, stay_period_financial_year = :stayPeriodFinancialYear,
								weather_pe_in_india_applicable_from = :whetherPEInIndiaApplicableFrom, weather_pe_in_india_applicable_to = :whetherPEInIndiaApplicableTo, nature_of_payment = :natureOfPayment,
								deductee_aadhar_number = :deducteeAadharNumber, is_poem_declaration = :isPoemDeclaration, poem_future_date = :poemFutureDate, country_to_remittance = :countryToRemittance,
								beneficial_owner_of_income = :beneficialOwnerOfIncome, is_beneficial_ownership_of_declaration = :isBeneficialOwnershipOfDeclaration, mli_ppt_condition_satisifed = :mliPptConditionSatisifed,
								mli_slob_condition_satisifed = :mliSlobConditionSatisifed, is_mli_ppt_slob = :isMliPptSlob, nature_of_remittance = :natureOfRemittance ,article_number_dtaa = :articleNumberDtaa, 
								section_of_incometax_act = :sectionOfIncometaxAct, aggreement_for_transaction = :aggreementForTransaction, accountant_name = :accountantName, name_of_the_proprietorship_firm = :nameOfTheProprietorshipFirm, 
								ca_flat_door_block_no = :caFlatDoorBlockNo, ca_name_building_village = :caNameBuildingVillage, ca_road_street_postoffice = :caRoadStreetPostoffice, ca_area_locality = :caAreaLocality, 
								ca_town_city_district = :caTownCityDistrict, ca_state = :caState, ca_country = :caCountry, ca_pin_code = :caPinCode, membership_number = :membershipNumber, 
								deductee_master_registration_number = :deducteeMasterRegistrationNumber WHERE deductee_master_id = :deducteeMasterId ; ]]>
					</value>
				</entry>
				<entry key="get_tcs_count_1">
					<value>
						<![CDATA[SELECT ISNULL(SUM(utilized_amount),0) FROM Transactions.tcs_lcc_utilization WHERE assessment_year<:assessmentYear AND collector_master_tan=
							:deductorTan AND lcc_master_id = :lccMasterId AND active = 1]]>
					</value>
				</entry>
				<entry key="get_tcs_count_2">
					<value>
						<![CDATA[SELECT ISNULL(SUM(utilized_amount),0) FROM Transactions.tcs_lcc_utilization WHERE assessment_year=:assessmentYear AND collector_master_tan=
							:deductorTan AND challan_month<4 AND lcc_master_id = :lccMasterId AND active = 1]]>
					</value>
				</entry>
				<entry key="get_tcs_total_opening_amount_for_month">
					<value>
						<![CDATA[SELECT ISNULL(SUM(utilized_amount),0) FROM Transactions.tcs_lcc_utilization WHERE assessment_year=:assessmentYear AND collector_master_tan=
								:deductorTan AND lcc_master_id = :lccMasterId AND challan_month = :month AND active = 1]]>
					</value>
				</entry>
				<entry key="get_lcc_adjustment_count">
					<value>
						<![CDATA[SELECT COUNT(1) FROM Transactions.tcs_lcc_utilization WHERE assessment_year = :assessmentYear AND collector_master_tan = :deductorTan 
								AND lcc_master_id = :lccMasterId AND challan_month = :month AND active = 1]]>
					</value>
				</entry>
				<entry key="get_list_tcs_lcc_utilization">
					<value>
						<![CDATA[ SELECT * FROM Transactions.tcs_lcc_utilization WHERE assessment_year = :assessmentYear AND collector_master_tan = :deductorTan 
								AND lcc_master_id = :lccMasterId AND challan_month = :month AND active = 1 ]]>
					</value>
				</entry>
				<entry key="get_lcc_certificate_no_tan">
					<value>
					<![CDATA[ SELECT * FROM Client_Masters.tcs_lcc_master WHERE certificate_number = :certificateNo AND collector_master_tan = :deductorTan AND active = 1 ]]>
					</value>
				</entry>
				<entry key="find_tcs_line_item_id">
					<value>
						<![CDATA[ SELECT * FROM Transactions.tcs_invoice_line_item WHERE assessment_year = :year AND collector_tan = :tan AND 
									id = :id AND active = 1 ]]>
					</value>
				</entry>

				<entry key="get_tcs_lcc_master_matrix">
					<value>
				            <![CDATA[ DECLARE @OpeingAmount DECIMAL(30,2),
        							@month INT = 4,
       								@certificate_number VARCHAR(256) = :certificateNumber,
        							@collector_tan VARCHAR(25) = :collectorTan,
									@assessment_year INT = :year,
									@lcc_applicable_from DATETIME,
									@lcc_applicable_to DATETIME
									SELECT @lcc_applicable_from  = lcc_applicable_from, @lcc_applicable_to  = lcc_applicable_to
									FROM Client_Masters.tcs_lcc_master
									WHERE assessment_year = @assessment_year AND certificate_number = @certificate_number AND collector_master_tan = @collector_tan
							CREATE TABLE #TEMP
							(Month varchar(25),
							OpeingAmount DECIMAL(30,2),
							FTM DECIMAL(30,2),
							Adjusted DECIMAL(30,2),
							ClosingAmount DECIMAL(30,2));
        INSERT INTO #TEMP(Month,OpeingAmount,FTM,Adjusted,ClosingAmount)
        SELECT @month AS Month,(SUM(TotalLccAmount)-SUM(TotalLccUtilizedAmount)) AS OpeningAmount,
               SUM(TotalLccAmountByMonth) AS TotalLccAmountByMonth,
               SUM(TotalLccUtilizedAmountByMonth) AS TotalLccUtilizedAmountByMonth,
               ((SUM(TotalLccAmount)-SUM(TotalLccUtilizedAmount)) + SUM(TotalLccAmountByMonth))- SUM(TotalLccUtilizedAmountByMonth) AS ClosingAmount
        FROM
        (SELECT ISNULL(SUM(amount),0) AS TotalLccAmount,0.00 AS TotalLccUtilizedAmount ,0.00 AS TotalLccAmountByMonth,0.00 AS TotalLccUtilizedAmountByMonth
        FROM Client_Masters.tcs_lcc_master
        WHERE assessment_year < @assessment_year  AND collector_master_tan = @collector_tan AND
              active = 1 AND certificate_number = @certificate_number
        UNION ALL
        SELECT 0.00,ISNULL(SUM(LU.utilized_amount),0) AS TotalLccUtilizedAmount,0.00,0.00
        FROM Transactions.tcs_lcc_utilization LU
		INNER JOIN Client_Masters.tcs_lcc_master L ON LU.lcc_master_id = L.id
        WHERE LU.assessment_year < @assessment_year AND LU.collector_master_tan = @collector_tan AND LU.active = 1 AND
		      L.assessment_year < @assessment_year AND L.collector_master_tan = @collector_tan AND L.active = 1 AND
			  L.certificate_number = @certificate_number
        UNION ALL
        SELECT 0.00,0.00,ISNULL(SUM(amount),0) AS TotalLccAmountByMonth,0.00
        FROM Client_Masters.tcs_lcc_master
        WHERE assessment_year = @assessment_year AND collector_master_tan = @collector_tan AND
              active= 1 AND certificate_number = @certificate_number AND validation_status = 1 AND
		      DATEPART(MM,lcc_applicable_from) = @month 
        UNION ALL
        SELECT 0.00,0.00,0.00,ISNULL(SUM(LU.utilized_amount),0) AS TotalLccUtilizedAmountByMonth
        FROM Transactions.tcs_lcc_utilization LU
		INNER JOIN Client_Masters.tcs_lcc_master L ON LU.lcc_master_id = L.id
        WHERE LU.assessment_year = @assessment_year AND LU.collector_master_tan = @collector_tan AND LU.active = 1 AND
		      L.assessment_year = @assessment_year AND L.collector_master_tan = @collector_tan AND L.active = 1 AND
              LU.challan_month= @month AND L.certificate_number = @certificate_number AND validation_status = 1) A
        SET @month = 5
        WHILE @month < 13
        BEGIN
            SELECT @OpeingAmount =  IIF(DATEPART(MM,@lcc_applicable_from) <= @month AND DATEPART(MM,@lcc_applicable_to) >= @month, ISNULL(ClosingAmount,0),00)
            FROM #TEMP
            INSERT INTO #TEMP(Month,OpeingAmount,FTM,Adjusted,ClosingAmount)
            SELECT @month AS Month,@OpeingAmount,
                   SUM(TotalLccAmountByMonth) AS TotalLccAmountByMonth,
                   SUM(TotalLccUtilizedAmountByMonth) AS TotalLccUtilizedAmountByMonth,
                  (@OpeingAmount + SUM(TotalLccAmountByMonth))- SUM(TotalLccUtilizedAmountByMonth) AS ClosingAmount
            FROM(
                 SELECT ISNULL(SUM(amount),0) AS TotalLccAmountByMonth,0.00 AS TotalLccUtilizedAmountByMonth
                 FROM Client_Masters.tcs_lcc_master
                 WHERE assessment_year = @assessment_year AND collector_master_tan = @collector_tan AND 
                       active= 1 AND certificate_number = @certificate_number AND validation_status = 1 AND
		               DATEPART(MM,lcc_applicable_from) = @month 
                 UNION ALL
                 SELECT 0.00,ISNULL(SUM(LU.utilized_amount),0) AS TotalLccUtilizedAmountByMonth
                 FROM Transactions.tcs_lcc_utilization LU
		         INNER JOIN Client_Masters.tcs_lcc_master L ON LU.lcc_master_id = L.id
                 WHERE LU.assessment_year = @assessment_year AND LU.collector_master_tan = @collector_tan AND LU.active = 1 AND
				       L.assessment_year = @assessment_year AND L.collector_master_tan = @collector_tan AND L.active = 1 AND
                       LU.challan_month = @month AND L.certificate_number = @certificate_number AND validation_status = 1)A
               SET @month = @month + 1;
        END
        IF @month = 13
        BEGIN
           SET @month = 1
           WHILE @month < 4
           BEGIN
              SELECT @OpeingAmount = IIF(DATEPART(MM,@lcc_applicable_from) <= @month AND DATEPART(MM,@lcc_applicable_to) >= @month, ISNULL(ClosingAmount,0),00)
            FROM #TEMP
            INSERT INTO #TEMP(Month,OpeingAmount,FTM,Adjusted,ClosingAmount)
            SELECT @month AS Month,@OpeingAmount,
                   SUM(TotalLccAmountByMonth) AS TotalLccAmountByMonth,
                   SUM(TotalLccUtilizedAmountByMonth) AS TotalLccUtilizedAmountByMonth,
                  (@OpeingAmount + SUM(TotalLccAmountByMonth))- SUM(TotalLccUtilizedAmountByMonth) AS ClosingAmount
            FROM(
                 SELECT ISNULL(SUM(amount),0) AS TotalLccAmountByMonth,0.00 AS TotalLccUtilizedAmountByMonth
                 FROM Client_Masters.tcs_lcc_master
                 WHERE assessment_year = @assessment_year AND collector_master_tan = @collector_tan AND --challan_month = @month AND
                       active= 1 AND certificate_number = @certificate_number AND validation_status = 1 AND
		               DATEPART(MM,lcc_applicable_from) = @month 
                 UNION ALL
                 SELECT 0.00,ISNULL(SUM(LU.utilized_amount),0) AS TotalLccUtilizedAmountByMonth
                 FROM Transactions.tcs_lcc_utilization LU
		         INNER JOIN Client_Masters.tcs_lcc_master L ON LU.lcc_master_id = L.id
                 WHERE LU.assessment_year = @assessment_year AND LU.collector_master_tan = @collector_tan AND LU.active = 1 AND
				       L.assessment_year = @assessment_year AND L.collector_master_tan = @collector_tan AND L.active = 1 AND
                       LU.challan_month= @month AND L.certificate_number = @certificate_number AND validation_status = 1)A
               SET @month = @month + 1;
           END
        END
        SELECT * FROM #TEMP  ]]>
					</value>
				</entry>
				<entry key="get_tcs_lcc_closing_opening_matrix">
					<value>
						<![CDATA[ 
								DECLARE @month INT = :month,
								@assessment_year INT = :year,
								@collector_tan varchar(25) = :collectorTan,
								@certificate_number VARCHAR(256) = :certificateNumber;
								CREATE TABLE #TEMP
								(collectorTan VARCHAR(25),
								openingAmount DECIMAL(30,4),
								adjusted DECIMAL(30,4),
								closingAmount DECIMAL(30,4),
								collecteePan VARCHAR(25),
								collecteeName VARCHAR(256),
								postingDateOfDocument DATETIME);
        						IF @month BETWEEN 4 AND 12
       							 BEGIN
						INSERT INTO #TEMP(collectorTan,openingAmount,adjusted,closingAmount,collecteePan,
			                  collecteeName,postingDateOfDocument)
			SELECT collector_master_tan AS collectorTan,SUM(TotalLccAmount) AS openingAmount,
			       SUM(TotalLccUtilizedAmount) AS adjusted,
				   (SUM(TotalLccAmount)-SUM(TotalLccUtilizedAmount)) AS closingAmount,
				   lcc_master_pan AS collecteePan,collectee_name AS collecteeName,
				   validation_date AS postingDateOfDocument
			FROM
			((SELECT collector_master_tan,ISNULL(SUM(amount),0) AS TotalLccAmount,0 AS TotalLccUtilizedAmount ,
			         lcc_master_pan,collectee_name,validation_date
			FROM Client_Masters.tcs_lcc_master
			WHERE assessment_year < @assessment_year AND collector_master_tan = @collector_tan AND 
			      active = 1 AND certificate_number = @certificate_number
			GROUP BY collector_master_tan,lcc_master_pan,collectee_name,validation_date)
			UNION ALL
			(SELECT collector_master_tan,ISNULL(SUM(amount),0) AS TotalLccAmount,0 AS TotalLccUtilizedAmount,
			        lcc_master_pan,collectee_name,validation_date
			FROM Client_Masters.tcs_lcc_master
			WHERE assessment_year = @assessment_year AND collector_master_tan = @collector_tan AND 
			      active = 1 AND certificate_number = @certificate_number
			GROUP BY collector_master_tan,lcc_master_pan,collectee_name,validation_date)
			UNION ALL
			(SELECT LU.collector_master_tan,0 AS TotalLccAmount,ISNULL(SUM(LU.utilized_amount),0) AS TotalLccUtilizedAmount ,
			        L.lcc_master_pan,L.collectee_name,L.validation_date
			FROM Client_Masters.tcs_lcc_master L
			INNER JOIN Transactions.tcs_lcc_utilization LU ON L.id = LU.lcc_master_id
			WHERE L.assessment_year < @assessment_year AND L.collector_master_tan = @collector_tan AND 
			      L.active = 1  AND LU.assessment_year < @assessment_year AND 
				  LU.collector_master_tan = @collector_tan AND LU.active = 1  AND L.certificate_number = @certificate_number
			GROUP BY LU.collector_master_tan,L.lcc_master_pan,L.collectee_name,L.validation_date)
			UNION ALL
			(SELECT LU.collector_master_tan,0 AS TotalLccAmount,ISNULL(SUM(LU.utilized_amount),0) AS TotalLccUtilizedAmount,
			        L.lcc_master_pan,L.collectee_name,L.validation_date
			FROM Client_Masters.tcs_lcc_master L
			INNER JOIN Transactions.tcs_lcc_utilization LU ON L.id = LU.lcc_master_id 
			WHERE L.assessment_year = @assessment_year AND L.collector_master_tan = @collector_tan AND 
			      L.active = 1  AND LU.assessment_year = @assessment_year AND LU.collector_master_tan = @collector_tan AND LU.challan_month BETWEEN 4 AND 12 AND
				  LU.active = 1 AND LU.challan_month <= @month AND L.certificate_number = @certificate_number
			GROUP BY LU.collector_master_tan,L.lcc_master_pan,L.collectee_name,L.validation_date)) A
			GROUP BY collector_master_tan,lcc_master_pan,collectee_name,validation_date
			SELECT * FROM #TEMP
			END
			IF @month BETWEEN 1 AND 3
			BEGIN
			   INSERT INTO #TEMP(collectorTan,openingAmount,adjusted,closingAmount,collecteePan,
			                     collecteeName,postingDateOfDocument)
			   SELECT collector_master_tan AS collectorTan,SUM(TotalLccAmount) AS openingAmount,
			          SUM(TotalLccUtilizedAmount) AS adjusted,
				     (SUM(TotalLccAmount)-SUM(TotalLccUtilizedAmount)) AS closingAmount,
				      lcc_master_pan AS collecteePan,collectee_name AS collecteeName,
				      validation_date AS postingDateOfDocument
			FROM
			((SELECT collector_master_tan,ISNULL(SUM(amount),0) AS TotalLccAmount,0 AS TotalLccUtilizedAmount ,
			         lcc_master_pan,collectee_name,validation_date
			FROM Client_Masters.tcs_lcc_master 
			WHERE assessment_year < @assessment_year AND collector_master_tan = @collector_tan AND 
			      active = 1 AND certificate_number = @certificate_number
			GROUP BY collector_master_tan,lcc_master_pan,collectee_name,validation_date)
			UNION ALL
			(SELECT collector_master_tan,ISNULL(SUM(amount),0) AS TotalLccAmount,0 AS TotalLccUtilizedAmount,
			        lcc_master_pan,collectee_name,validation_date
			FROM Client_Masters.tcs_lcc_master 
			WHERE assessment_year = @assessment_year AND collector_master_tan = @collector_tan AND 
			      active = 1 AND certificate_number = @certificate_number
			GROUP BY collector_master_tan,lcc_master_pan,collectee_name,validation_date)
			UNION ALL
			(SELECT LU.collector_master_tan,0 AS TotalLccAmount,ISNULL(SUM(LU.utilized_amount),0) AS TotalLccUtilizedAmount ,
			        L.lcc_master_pan,L.collectee_name,L.validation_date
			FROM Client_Masters.tcs_lcc_master L
			INNER JOIN Transactions.tcs_lcc_utilization LU ON L.id = LU.lcc_master_id
			WHERE L.assessment_year < @assessment_year AND L.collector_master_tan = @collector_tan AND 
			      L.active = 1 AND LU.assessment_year < @assessment_year AND 
				  LU.collector_master_tan = @collector_tan AND LU.active = 1 AND L.certificate_number = @certificate_number
			GROUP BY LU.collector_master_tan,L.lcc_master_pan,L.collectee_name,L.validation_date)
			UNION ALL
		   (SELECT LU.collector_master_tan,0 AS TotalLccAmount,ISNULL(SUM(LU.utilized_amount),0) AS TotalLccUtilizedAmount,
			       L.lcc_master_pan,L.collectee_name,L.validation_date
			FROM Client_Masters.tcs_lcc_master L
			INNER JOIN Transactions.tcs_lcc_utilization LU ON L.id = LU.lcc_master_id 
			WHERE L.assessment_year = @assessment_year AND L.collector_master_tan = @collector_tan AND 
			      L.active = 1 AND LU.assessment_year = @assessment_year AND LU.collector_master_tan = @collector_tan AND 
				  LU.active = 1 AND LU.challan_month BETWEEN 4 AND 12 AND L.certificate_number = @certificate_number
			GROUP BY LU.collector_master_tan,L.lcc_master_pan,L.collectee_name,L.validation_date)
			UNION ALL
			(SELECT LU.collector_master_tan,0 AS TotalLccAmount,ISNULL(SUM(LU.utilized_amount),0) AS TotalLccUtilizedAmount,
			        L.lcc_master_pan,L.collectee_name,L.validation_date
			FROM Client_Masters.tcs_lcc_master L
			INNER JOIN Transactions.tcs_lcc_utilization LU ON L.id = LU.lcc_master_id 
			WHERE L.assessment_year = @assessment_year AND L.collector_master_tan = @collector_tan AND 
			      L.active = 1 AND LU.assessment_year = @assessment_year AND LU.collector_master_tan = @collector_tan AND 
				  LU.active = 1 AND LU.challan_month <= @month AND L.certificate_number = @certificate_number
			GROUP BY LU.collector_master_tan,L.lcc_master_pan,L.collectee_name,L.validation_date)) A
			GROUP BY collector_master_tan,lcc_master_pan,collectee_name,validation_date
			SELECT * FROM #TEMP
			END 
						]]>
					</value>
				</entry>
				<entry key="ldc_master_basedOn_tan_certificateNo">
					<value>
				           <![CDATA[SELECT ldc_master_id AS Ldc_master_id,assessment_year AS Assessment_year,ldc_master_pan AS Ldc_master_pan,
				      deductor_master_tan AS Deductor_master_tan,active AS Active,amount AS Amount,applicable_from AS Applicable_from,
				      applicable_to AS Applicable_to,certificate_number AS Certificate_number,created_by AS Created_by,created_date AS Created_date,
				      db_applicable_from AS Db_applicable_from,db_applicable_to AS Db_applicable_to,db_rate AS Db_rate,
				      db_section AS Db_section,deductee_name AS Deductee_name,modified_by AS Modified_by,modified_date AS Modified_date,
				      nature_of_payment AS Nature_of_payment,rate AS Rate,remaining_amount AS Remaining_amount,section AS Section,status AS Status,
				      threshold_limit AS Threshold_limit,traces_utilized_amount AS Traces_utilized_amount,utilized_amount AS Utilized_amount,
				      validation_date AS Validation_date,match_score AS Match_score,name_as_per_traces AS Name_as_per_traces,
				      remarks_as_per_traces AS Remarks_as_per_traces FROM Client_Masters.ldc_master WHERE 
				      certificate_number=:certificateNo AND  deductor_master_tan=:tan ;
				    ]]>
					</value>
				</entry>
				<entry key="invoices_Found_In_GLBy_BatchId">
					<value>
				           <![CDATA[SELECT * FROM Transactions.general_ledger WHERE batch_upload_id=:batchId AND is_nad=:notAbleToDetermine AND tds_exist=:tdsExist
   								AND is_accounting_code_exists=:isAccountingCode AND record_found=:recordFound AND mismatch=:mismatch AND amount_mismatch=:amountMismatch]]>
					</value>
				</entry>
				<entry key="get_count_invoices_Found_In_GLBy_BatchId">
					<value>
				           <![CDATA[SELECT COUNT(1) FROM Transactions.general_ledger WHERE batch_upload_id=:batchId AND is_nad=:notAbleToDetermine AND tds_exist=:tdsExist
   								AND is_accounting_code_exists=:isAccountingCode AND record_found=:recordFound AND mismatch=:mismatch AND amount_mismatch=:amountMismatch]]>
					</value>
				</entry>

				<entry key="get_count_invoices_Found_In_GL_By_Year_Month_Tan">
					<value>
				           <![CDATA[
				           SELECT COUNT(1) FROM Transactions.general_ledger WHERE assessment_year=:year AND deductor_master_tan=:tan AND assessment_month IN (:months) AND 
							tds_exist=:tdsExist AND is_nad=:notAbleToDetermine AND is_accounting_code_exists=:isAccountingCode AND record_found=:recordFound
 							 AND mismatch=:mismatch AND amount_mismatch=:amountMismatch 
				           ]]>
					</value>
				</entry>
				<entry key="invoices_Found_In_GL_By_Year_Month_Tan">
					<value>
				           <![CDATA[
				           SELECT * FROM Transactions.general_ledger WHERE assessment_year=:year AND deductor_master_tan=:tan AND assessment_month IN (:months) AND 
							tds_exist=:tdsExist AND is_nad=:notAbleToDetermine AND is_accounting_code_exists=:isAccountingCode AND record_found=:recordFound
 							 AND mismatch=:mismatch AND amount_mismatch=:amountMismatch 
				           ]]>
					</value>
				</entry>
				<entry key="invoices_Found_InGL_ByYear">
					<value>
				           <![CDATA[
				           SELECT * FROM Transactions.general_ledger WHERE assessment_year=:year AND deductor_master_tan=:tan  AND 
							tds_exist=:tdsExist AND is_nad=:notAbleToDetermine AND is_accounting_code_exists=:isAccountingCode AND record_found=:recordFound
 							 AND mismatch=:mismatch AND amount_mismatch=:amountMismatch 
				           ]]>
					</value>
				</entry>
				<entry key="get_count_invoices_Found_InGL_ByYear">
					<value>
				           <![CDATA[
				           SELECT COUNT(1) FROM Transactions.general_ledger WHERE assessment_year=:year AND deductor_master_tan=:tan  AND 
							tds_exist=:tdsExist AND is_nad=:notAbleToDetermine AND is_accounting_code_exists=:isAccountingCode AND record_found=:recordFound
 							 AND mismatch=:mismatch AND amount_mismatch=:amountMismatch 
				           ]]>
					</value>
				</entry>
				<entry key="find_By_BatchUploadId_And_Tds_Found_Count">
					<value>
				           <![CDATA[
				           SELECT COUNT(1) FROM Transactions.general_ledger WHERE batch_upload_id=:batchId AND tds_exist=:tdsExist; 
				           ]]>
					</value>
				</entry>
				<entry key="find_By_BatchUploadId_And_Tds_Found">
					<value>
				           <![CDATA[
				           SELECT * FROM Transactions.general_ledger WHERE batch_upload_id=:batchId AND tds_exist=:tdsExist 
				           ]]>
					</value>
				</entry>
				<entry key="find_By_Year_Month_Tan_And_Tds_Found">
					<value>
				           <![CDATA[
				           SELECT * FROM Transactions.general_ledger WHERE assessment_year=:year AND assessment_month IN (:months) AND deductor_master_tan=:tan 
							AND tds_exist=:tdsExist  
				           ]]>
					</value>
				</entry>
				<entry key="find_By_Year_Month_Tan_And_Tds_Found_COUNT">
					<value>
				           <![CDATA[
				           SELECT COUNT(1) FROM Transactions.general_ledger WHERE assessment_year=:year AND assessment_month IN (:months) AND deductor_master_tan=:tan 
							AND tds_exist=:tdsExist;  
				           ]]>
					</value>
				</entry>
				<entry key="find_By_Year_And_Tds_Found">
					<value>
				           <![CDATA[
				           SELECT * FROM Transactions.general_ledger WHERE assessment_year=:year  AND deductor_master_tan=:tan 
							AND tds_exist=:tdsExist		  
				           ]]>
					</value>
				</entry>
				<entry key="find_By_Year_And_Tds_Found_count">
					<value>
				           <![CDATA[
				           SELECT COUNT(1) FROM Transactions.general_ledger WHERE assessment_year=:year  AND deductor_master_tan=:tan 
							AND tds_exist=:tdsExist		  
				           ]]>
					</value>
				</entry>
				<entry key="nad_And_Account_Code_Exists">
					<value>
				           <![CDATA[
				           SELECT * FROM Transactions.general_ledger WHERE batch_upload_id=:batchId  AND is_nad=:notAbleToDetermine 
					AND is_accounting_code_exists=:isAccountingCode		  
				           ]]>
					</value>
				</entry>
				<entry key="get_count_of_nad_And_Account_Code_Exists">
					<value>
				           <![CDATA[
				           SELECT COUNT(1) FROM Transactions.general_ledger WHERE batch_upload_id=:batchId  AND is_nad=:notAbleToDetermine 
					AND is_accounting_code_exists=:isAccountingCode;		  
				           ]]>
					</value>
				</entry>
				<entry key="nad_And_Account_Code_Exists_By_Year_Month_Tan">
					<value>
				           <![CDATA[
				           SELECT * FROM Transactions.general_ledger WHERE assessment_year=:year AND deductor_master_tan=:tan  AND 
				 assessment_month IN (:months)  AND is_nad=:notAbleToDetermine AND is_accounting_code_exists=:isAccountingCode		  
				           ]]>
					</value>
				</entry>
				<entry
					key="get_count_of_nad_And_Account_Code_Exists_By_Year_Month_Tan">
					<value>
				           <![CDATA[
				           SELECT COUNT(1) FROM Transactions.general_ledger WHERE assessment_year=:year AND deductor_master_tan=:tan  AND 
				 assessment_month IN (:months)  AND is_nad=:notAbleToDetermine AND is_accounting_code_exists=:isAccountingCode	 ;	  
				           ]]>
					</value>
				</entry>
				<entry key="nad_And_Account_Code_Exists_By_Year">
					<value>
				           <![CDATA[
				           SELECT * FROM Transactions.general_ledger WHERE assessment_year=:year AND deductor_master_tan=:tan  
				AND is_nad=:notAbleToDetermine AND is_accounting_code_exists=:isAccountingCode		  
				           ]]>
					</value>
				</entry>
				<entry key="get_count_of_nad_And_Account_Code_Exists_By_Year">
					<value>
				           <![CDATA[
				           SELECT COUNT(1) FROM Transactions.general_ledger WHERE assessment_year=:year AND deductor_master_tan=:tan  
				AND is_nad=:notAbleToDetermine AND is_accounting_code_exists=:isAccountingCode		  
				           ]]>
					</value>
				</entry>
				<entry key="gl_with_year_mismatch_amountMismatch_recordFound">
					<value>
				           <![CDATA[
				           	SELECT * FROM Transactions.general_ledger WHERE	batch_upload_id=:batchId AND tds_exist=0 AND is_nad=0 AND is_accounting_code_exists=0 AND record_found=:recordFound
	            AND mismatch=:mismatch AND amount_mismatch=:amountMismatch 		  
				           ]]>
					</value>
				</entry>
				<entry
					key="gl_with_year_tan_month_mismatch_amountMismatch_recordFound_nad_tdsExist">
					<value>
				           <![CDATA[
				           SELECT * FROM Transactions.general_ledger WHERE deductor_master_tan=:tan AND assessment_year=:year AND tds_exist=0 AND assessment_month in (:month)
                AND is_nad=0 AND is_accounting_code_exists=0 AND record_found=:recordFound  AND mismatch=:mismatch AND amount_mismatch=:amountMismatch 	  
				           ]]>
					</value>
				</entry>
				<entry
					key="gl_with_year_tan_month_mismatch_amountMismatch_recordFound_nad">
					<value>
				           <![CDATA[
				          	  SELECT * FROM Transactions.general_ledger WHERE deductor_master_tan=:tan AND assessment_year=:year  
	                AND is_nad=0 AND is_accounting_code_exists=0 AND record_found=:recordFound  AND mismatch=:mismatch AND amount_mismatch=:amountMismatch 
				           ]]>
					</value>
				</entry>
				<entry
					key="gl_with_year_tan_month_mismatch_amountMismatch_recordFound_nad_month_values">
					<value>
				           <![CDATA[
				          	  	 SELECT * FROM Transactions.general_ledger WHERE deductor_master_tan=:tan AND assessment_year=:year AND tds_exist=0 
	        AND is_nad=0 AND is_accounting_code_exists=0 AND record_found=:recordFound  AND mismatch=:mismatch AND amount_mismatch=:amountMismatch 
	        AND assessment_month IN(:months) 
				           ]]>
					</value>
				</entry>
				<entry key="gl_with_batchUploadId_tds_exist_true">
					<value>
				           <![CDATA[
				          	 SELECT * FROM Transactions.general_ledger WHERE	batch_upload_id=:batchId AND tds_exist=1  ;
				           ]]>
					</value>
				</entry>
				<entry key="gl_with_tan_year_month_tds_exist_true">
					<value>
				           <![CDATA[
				          	 SELECT * FROM Transactions.general_ledger WHERE deductor_master_tan=:tan AND assessment_year=:year AND tds_exist=1 
			AND assessment_month in (:month);
				           ]]>
					</value>
				</entry>
				<entry key="gl_with_tan_year_tds_exist_true">
					<value>
				           <![CDATA[
				          	 SELECT * FROM Transactions.general_ledger WHERE deductor_master_tan=:tan AND assessment_year=:year AND tds_exist=1 ;
				           ]]>
					</value>
				</entry>
				<entry key="gl_with_tan_year_multiplemonth_tds_exist_true">
					<value>
				           <![CDATA[
				          	 SELECT * FROM Transactions.general_ledger WHERE deductor_master_tan=:tan AND assessment_year=:year AND tds_exist=1 
						AND assessment_month IN (:months);
				           ]]>
					</value>
				</entry>
				<entry key="gl_with_codeExists_batch_upload_id_is_nad_true">
					<value>
				           <![CDATA[
				          	SELECT * FROM Transactions.general_ledger WHERE	batch_upload_id=:batchId AND is_nad=1 AND 
			is_accounting_code_exists=:codeExists ;
				           ]]>
					</value>
				</entry>
				<entry key="gl_with_codeExists_tan_year_month_is_nad_true">
					<value>
				           <![CDATA[
				          	SELECT * FROM Transactions.general_ledger WHERE deductor_master_tan=:tan AND assessment_year=:year AND is_nad=1 AND assessment_month=:month AND 
			is_accounting_code_exists=:codeExists ;
				           ]]>
					</value>
				</entry>
				<entry key="gl_with_codeExists_tan_year_is_nad_true">
					<value>
				           <![CDATA[
				          	SELECT * FROM Transactions.general_ledger WHERE deductor_master_tan=:tan AND assessment_year=:year AND is_nad=1  AND 
					is_accounting_code_exists=:codeExists ;
				           ]]>
					</value>
				</entry>
				<entry
					key="gl_with_codeExists_tan_year_is_nad_true_multipleMonths">
					<value>
				           <![CDATA[
				          	SELECT * FROM Transactions.general_ledger WHERE deductor_master_tan=:tan AND assessment_year=:year AND is_nad=1  AND 
					is_accounting_code_exists=:codeExists AND assessment_month IN(:months);
				           ]]>
					</value>
				</entry>
				<entry key="get_invoice_by_batchId_gl_found">
					<value>
				           <![CDATA[
				          	SELECT * FROM Transactions.invoice_line_item WHERE batch_upload_id=:batchId AND gl_found=0 ;
				           ]]>
					</value>
				</entry>
				<entry key="get_invoice_by_year_month_tan_gl_found">
					<value>
				           <![CDATA[
				  SELECT * FROM Transactions.invoice_line_item WHERE assessment_year=:year AND challan_month=:month AND deductor_master_tan=:tan AND gl_found=0 ;
				           ]]>
					</value>
				</entry>
				<entry key="get_invoice_by_year__tan_gl_found">
					<value>
				           <![CDATA[
				 SELECT * FROM Transactions.invoice_line_item WHERE assessment_year=:year AND deductor_master_tan=:tan AND gl_found=0 ;

				           ]]>
					</value>
				</entry>
				<entry key="get_invoice_by_year__tan_gl_found_multipleMonth">
					<value>
				           <![CDATA[
				SELECT * FROM Transactions.invoice_line_item WHERE assessment_year=:year AND deductor_master_tan=:tan AND gl_found=0
			challan_month IN(:months);

				           ]]>
					</value>
				</entry>
				<entry key="get_ao_threshold_rate">
					<value>
				           <![CDATA[ SELECT * FROM Onboarding.email_notification WHERE  deductee_master_pan = :deductorMasterPan AND [type] = :noficationType AND 
									ao_master_id = :aoMasterId  AND threshold_ao = :rate AND active = 1;]]>
					</value>
				</entry>
				<entry key="get_email_notification_by_year">
					<value>
				           <![CDATA[ SELECT * FROM Onboarding.email_notification WHERE assessment_year = :assessmentYear AND active = 1;]]>
					</value>
				</entry>
				<entry key="get_email_notification_by_id">
					<value>
				           <![CDATA[SELECT * FROM Onboarding.email_notification WHERE assessment_year = :assessmentYear AND month_sent = :monthSent
				           			AND email_notification_id = :emailNotificationId AND active = 1; ]]>
					</value>
				</entry>
				<entry key="get_tcs_pdf_transaction_status">
					<value> 
					<![CDATA[ SELECT COUNT(1) FROM Transactions.tcs_invoice_line_item WHERE assessment_year IN(:previousYear,:currentYear,:nextYear) AND
								collector_tan = :tan  AND processed_from = :type AND active = 1 AND key_duplicate = 0 AND (is_parent is null or is_parent =0) AND
								approved_for_challan = 0 AND challan_paid = 0 AND created_date >= :startDate AND created_date <= :endDate;]]>
					</value>
				</entry>
				<entry key="deductee_resident_status">
					<value> 
					<![CDATA[ 
					SELECT section,additional_sections, deductee_key, deductee_aadhar_number from Client_Masters.deductee_master_residential where deductee_key =:name AND active=1;]]>
					</value>
				</entry>
				<entry key="deductee_non_resident_status">
					<value> 
					<![CDATA[ 
					SELECT section,additional_sections, deductee_key, deductee_aadhar_number from Client_Masters.deductee_master_non_residential where deductee_key =:name AND active=1;]]>
					</value>
				</entry>
				<entry key="deductee_resident_status_all">
					<value> 
					<![CDATA[ 
					SELECT section,additional_sections,deductee_key,deductee_aadhar_number,deductee_status, tds_applicability_under_section, 
						gr_or_ir_indicator, pan_status, gstin_number 
						from Client_Masters.deductee_master_residential where active = 1 and deductor_master_pan = :deductorPan;]]>
					</value>
				</entry>
				<entry key="deductee_non_resident_status_all">
					<value> 
					<![CDATA[ 
					SELECT section,additional_sections,deductee_key,deductee_aadhar_number, deductee_status, tds_applicability_under_section, 
						gr_or_ir_indicator, pan_status, gstin_number 
						from Client_Masters.deductee_master_non_residential where active = 1 and deductor_master_pan = :deductorPan ;]]>
					</value>
				</entry>
				<entry
					key="tcs_invoice_By_ReceiptSerialNo__dBSRCode_ReceiptDate">
					<value>
					<![CDATA[
					      SELECT distinct 
       l.id,l.source_identifier,l.source_file_name,l.collector_code,l.collector_pan,l.collector_tan,collector_gstin,
	   l.collectee_code,l.collectee_pan,collectee_gstin,document_type,supply_type,document_number,document_date,
	   original_document_number,original_document_date,accounting_document_number,clearing_date,clearing_document_number,
	   invoice_document_number,invoice_date,payment_desc,posting_date,line_number,hsn_or_sac,hsn_or_sac_desc,
	   invoice_desc,so_desc,gl_account_code,gl_desc,taxable_value,igst_amount,cgst_amount,sgst_amount,amount,discount,
	   invoice_value,l.tcs_section,l.tcs_rate,tcs_amount,l.tds_section,l.tds_rate,tds_amount,surcharge_rate,
	   surcharge_amount,itcess_rate,itcess_amount,record_type,
       derived_tcs_amount,derived_tcs_rate,derived_tcs_section,
       (ISNULL(l.applicable_total_taxable_amount,0)*l.final_tcs_rate*0.01) as final_tcs_amount,final_tcs_rate,final_tcs_section,
	   cm.name_of_the_collectee as collectee_name,cm.collectee_status,collectee_residential_status,
	   challan_serial_no,receipt_bsr_code,challan_paid_date,
	   system_challan_serial_no,is_challan_split,l.active,challan_month,assessment_year,assessment_month,l.created_by,
	   create_date,l.modified_by,l.modified_date,category,challan_paid,approved_for_challan,is_parent,is_challan_generated,
	   challan_generated_date,is_exempted,date_at_which_tcs_is_deposited,penalty,interest,has_lcc,l.nature_of_income,
	   under_threshold,noi_id,consumed_amount,derived_noi_id,final_noi_id,derived_nature_of_income,final_nature_of_income,
	   applicable_total_taxable_amount,consumed_by,actual_tcs_section,actual_tcs_rate,actual_tcs_amount,is_adjust,is_error,
	   error_reason,exempted_reason,invoice_line_item_id,is_cr_split_record,l.batch_upload_id,
	   l.user_defined_field1,l.user_defined_field2,l.user_defined_field3,l.user_defined_field4,l.user_defined_field5,
	   l.user_defined_field6,l.user_defined_field7,l.user_defined_field8 
	   						FROM Transactions.tcs_ledger l 
					      inner join Client_Masters.collectee_master cm on l.collectee_code =cm.collectee_code 
					      WHERE l.assessment_year=:assessmentYear AND l.collector_tan =:deductorTan 
					      AND cm.collector_tan = :deductorTan  
						 AND l.receipt_bsr_code=:bsrCode AND l.challan_serial_no=:receiptSerailNo AND l.challan_paid_date =:receiptDate AND 
						 l.active=1  AND l.challan_paid =:challanPaid  and l.is_parent=0 
							 
				          ]]>
					</value>
				</entry>
				
				<entry key="tcs_invoice_By_ReceiptSerialNo__dBSRCode_ReceiptDate_union">
					<value>
					<![CDATA[
					     	union 
				SELECT  distinct 
       l.id,l.source_identifier,l.source_file_name,l.collector_code,l.collector_pan,l.collector_tan,collector_gstin,
	   l.collectee_code,l.collectee_pan,collectee_gstin,document_type,supply_type,document_number,document_date,
	   original_document_number,original_document_date,accounting_document_number,null as clearing_date,null as clearing_document_number,
	  null as  invoice_document_number,null as invoice_date,null as payment_desc,posting_date,line_number,hsn_or_sac,hsn_or_sac_desc,
	   invoice_desc,so_desc,gl_account_code,gl_desc,taxable_value,igst_amount,cgst_amount,sgst_amount,null as amount,discount,
	   invoice_value,l.tcs_section,l.tcs_rate,tcs_amount,null as tds_section,null as tds_rate,null as tds_amount,surcharge_rate,
	   surcharge_amount,itcess_rate,itcess_amount,null as record_type,
       derived_tcs_amount,derived_tcs_rate,derived_tcs_section,final_tcs_amount,0.00 as final_tcs_rate,final_tcs_section,
	   cm.name_of_the_collectee as collectee_name,cm.collectee_status,null as collectee_residential_status,null as challan_serial_no,null as receipt_bsr_code,null as challan_paid_date,
	   null as system_challan_serial_no,null as is_challan_split,l.active,challan_month,assessment_year,challan_month as assessment_month,l.created_by,
	   l.created_date as create_date,l.modified_by,l.modified_date,null as category,challan_paid,approved_for_challan,is_parent,is_challan_generated,
	   challan_generated_date,is_exempted,null as date_at_which_tcs_is_deposited,null as penalty,null as interest,has_lcc,l.nature_of_income,
	   under_threshold,noi_id,null as consumed_amount,derived_noi_id,final_noi_id,derived_nature_of_income,final_nature_of_income,
	   applicable_total_taxable_amount,null as consumed_by,actual_tcs_section,actual_tcs_rate,actual_tcs_amount,is_adjust,is_error,
	   error_reason,exempted_reason,null as invoice_line_item_id,is_cr_split_record,l.batch_upload_id,
	   l.user_defined_field1,l.user_defined_field2,l.user_defined_field3,l.user_defined_field4,l.user_defined_field5,
	   l.user_defined_field6,l.user_defined_field7,l.user_defined_field8 
	   						FROM Transactions.tcs_invoice_line_item l 
	   						 inner join Client_Masters.collectee_master cm on l.collectee_code =cm.collectee_code 
	   						  AND cm.collector_tan = :deductorTan 
					      WHERE 
						 l.assessment_year=:assessmentYear AND l.collector_tan =:deductorTan 
					      AND cm.collector_tan = :deductorTan 
					      and   (is_exempted= 1 or has_ncc = 1)
						 and l.is_parent=0  and challan_month in (:months) 
						 and supply_type ='TAX' 
						 and (itcess_amount is null or itcess_amount = 0) and (surcharge_amount is null or surcharge_amount = 0) 
				          ]]>
					</value>
				</entry>
				<entry key="tcs_invoice_mismatch_count_update">
					<value>
					<![CDATA[
					      SELECT B.id ,COUNT(IT.id) AS mismatch_count INTO #INVOICE_MISMATCH
							FROM Transactions.tcs_batch_upload B
							INNER JOIN Transactions.tcs_invoice_line_item IT ON B.id = IT.batch_upload_id
							WHERE has_mismatch = 1 AND IT.challan_month = :month AND IT.assessment_year = :year AND 
								  collector_tan = :tan AND collector_pan = :deductorPan
							GROUP BY B.id;
							UPDATE B
							SET mismatch_count = M.mismatch_count
							FROM Transactions.tcs_batch_upload B
							INNER JOIN #INVOICE_MISMATCH M ON B.id = M.id;
				          ]]>
					</value>
				</entry>
				<entry key="tcs_payment_mismatch_count_update">
					<value>
					<![CDATA[
					      SELECT B.id ,COUNT(P.id) AS mismatch_count INTO #PAYMENT_MISMATCH
							FROM Transactions.tcs_batch_upload B
							INNER JOIN Transactions.tcs_payment P ON B.id = P.batch_upload_id
							WHERE has_mismatch = 1 AND P.challan_month = :month AND P.assessment_year = :year AND 
								  collector_tan = :tan AND collector_pan = :deductorPan
							GROUP BY B.id;
							UPDATE B
							SET mismatch_count = M.mismatch_count
							FROM Transactions.tcs_batch_upload B
							INNER JOIN #PAYMENT_MISMATCH M ON B.id = M.id;
				          ]]>
					</value>
				</entry>
				<entry key="get_invoices_with_interest_computed">
					<value>
					<![CDATA[
					      select * from Transactions.invoice_line_item where deductor_master_tan =:tan AND assessment_year=:year AND assessment_month=:month AND active =1 AND interest >0
                          AND key_duplicate =0 AND is_parent =0 AND is_interest_calculated=1
				          ]]>
					</value>
				</entry>
				<entry key="get_invoices_with_interest_computed_by_invoice_id">
					<value>
					<![CDATA[
					      select * from Transactions.invoice_line_item where invoice_line_item_id =:id AND active =1 AND interest >0
                          AND key_duplicate =0 AND is_parent =0 AND is_interest_calculated=1
				          ]]>
					</value>
				</entry>
				<entry key="get_count_of_invoices_with_interest_computed">
					<value>
					<![CDATA[
					      select count(1) from Transactions.invoice_line_item where deductor_master_tan =:tan AND assessment_year=:year AND assessment_month=:month AND active =1 AND interest >0
                          AND key_duplicate =0 AND is_parent =0 AND is_interest_calculated=1
				          ]]>
					</value>
				</entry>
				<entry key="get_advances_with_interest_computed">
					<value>
					<![CDATA[
					      select * from Transactions.advance  where deductor_master_tan =:tan AND assessment_year=:year AND assessment_month=:month AND active =1 AND interest >0
                          AND key_duplicate =0 AND is_parent =0 AND is_interest_calculated=1
				          ]]>
					</value>
				</entry>
				<entry key="get_count_of_advances_with_interest_computed">
					<value>
					<![CDATA[
					      select count(1) from Transactions.advance where deductor_master_tan =:tan AND assessment_year=:year AND assessment_month=:month AND active =1 AND interest >0
                          AND key_duplicate =0 AND is_parent =0 AND is_interest_calculated=1
				          ]]>
					</value>
				</entry>
				<entry key="get_provision_with_interest_computed">
					<value>
					<![CDATA[
					      select * from Transactions.provision  where deductor_master_tan =:tan AND assessment_year=:year AND assessment_month=:month AND active =1 AND interest >0
                          AND key_duplicate =0 AND is_parent =0 AND is_interest_calculated=1
				          ]]>
					</value>
				</entry>
				<entry key="get_count_of_provision_with_interest_computed">
					<value>
					<![CDATA[
					      select count(1) from Transactions.provision where deductor_master_tan =:tan AND assessment_year=:year AND assessment_month=:month AND active =1 AND interest >0
                          AND key_duplicate =0 AND is_parent =0 AND is_interest_calculated=1
				          ]]>
					</value>
				</entry>
				<entry
					key="get_provision_with_interest_computed_by_provision_id">
					<value>
					<![CDATA[
					      select * from Transactions.provision where provision_id =:id AND active =1 AND interest >0
                          AND key_duplicate =0 AND is_parent =0 AND is_interest_calculated=1
				          ]]>
					</value>
				</entry>
				<entry key="get_advance_with_interest_computed_by_advance_id">
					<value>
					<![CDATA[
					      select * from Transactions.advance where advance_id =:id AND active =1 AND interest >0
                          AND key_duplicate =0 AND is_parent =0 AND is_interest_calculated=1
				          ]]>
					</value>
				</entry>
				<entry key="invoice_interest_update">
					<value>
				  <![CDATA[
			       UPDATE Transactions.invoice_line_item SET action=:actionType,reason=:finalReason, final_tds_amount=:finalTdsAmount,is_interest_calculated=0  
			       WHERE invoice_line_item_id=:id; 
		          ]]>
					</value>
				</entry>
				<entry key="advance_interest_update">
					<value>
				<![CDATA[
			       UPDATE Transactions.advance  SET action=:action,reason=:reason, final_tds_amount=:finalTdsAmount ,is_interest_calculated=0 
			       WHERE advance_id =:id; 
		          ]]>
					</value>
				</entry>
				<entry key="provision_interest_update">
					<value>
				<![CDATA[
			       UPDATE Transactions.provision  SET action=:actionType,reason=:reason, final_tds_amount=:finalTdsAmount,is_interest_calculated=0  
			       WHERE provision_id =:id; 
		          ]]>
					</value>
				</entry>
				<entry
					key="get_resrident_invoice_shareholder_by_pan_year_and_month">
					<value>
				<![CDATA[
			       select * from Transactions.invoice_shareholder_resident  where assessment_year=:assessmentYear AND document_posting_month=:assessmentMonth AND
					deductor_master_pan=:deductorMasterPan AND is_parent=1 and payout_state !='REJECT'
		          ]]>
					</value>
				</entry>
				<entry
					key="get_countOf_resrident_invoice_shareholder_by_pan_year_and_month">
					<value>
				<![CDATA[
			       select count(1) from Transactions.invoice_shareholder_resident  where assessment_year=:assessmentYear AND document_posting_month=:assessmentMonth AND
					deductor_master_pan=:deductorMasterPan AND is_parent=1 and payout_state !='REJECT'
		          ]]>
					</value>
				</entry>
				<entry
					key="get_non_resrident_invoice_shareholder_by_pan_year_and_month">
					<value>
				<![CDATA[
			      select * from Transactions.invoice_shareholder_non_resident  where assessment_year=:assessmentYear AND document_posting_month=:assessmentMonth AND
					deductor_master_pan=:deductorMasterPan AND is_parent=1 and payout_state !='REJECT'
		          ]]>
					</value>
				</entry>
				<entry
					key="get_non_resrident_count_of_invoice_shareholder_by_pan_year_and_month">
					<value>
				<![CDATA[
			      select count(1) from Transactions.invoice_shareholder_non_resident  where assessment_year=:assessmentYear AND document_posting_month=:assessmentMonth AND
					deductor_master_pan=:deductorMasterPan AND is_parent=1 and payout_state !='REJECT'
		          ]]>
					</value>
				</entry>
				<entry
					key="get_non_resrident__invoice_shareholder_by_assesment_year">
					<value>
				<![CDATA[
			      select * from Transactions.invoice_shareholder_non_resident  where is_form15cb_generated=1 and form15cb_acknowledgement_no = 'NA' and is_parent =1 
					and assessment_year =:assessmentYear;
		          ]]>
					</value>
				</entry>
				<entry key="get_non_resrident__invoice_shareholder_by_id_pan">
					<value>
				<![CDATA[
			      select * from Transactions.invoice_shareholder_non_resident  where deductor_master_pan=:deductorPan and invoice_id =:id and is_parent =1 
					;
		          ]]>
					</value>
				</entry>
				<entry key="get_resrident__invoice_shareholder_by_id_pan">
					<value>
				<![CDATA[
			      select * from Transactions.invoice_shareholder_resident isr  where deductor_master_pan=:deductorPan and invoice_id =:id and is_parent =1 
					;
		          ]]>
					</value>
				</entry>
				<entry key="update_invoice_shareholder_non_resident_by_id">
					<value>
				<![CDATA[
			      UPDATE Transactions.invoice_shareholder_non_resident SET form15cb_acknowledgement_no=:form15CBAcknowledgementNo,form15cb_generation_date =:form15CBGenartionDate 
                  WHERE invoice_id =:id
		          ]]>
					</value>
				</entry>
				<entry key="update_invoice_shareholder_non_resident_for_approve">
					<value>
				<![CDATA[
			      UPDATE Transactions.invoice_shareholder_non_resident SET payout_state =:stringPayoutState , active =:shareholderActive , remarks =:remarks ,client_overridden_rate =:clientOverriddenRate,
                  final_total_withholding =:finalDividendWithholding,is_form15cb_generated =:ifForm15CBgenerated ,form15cb_acknowledgement_no =:form15CBAcknowledgementNo WHERE invoice_id =:id;
		          ]]>
					</value>
				</entry>
				<entry key="update_invoice_shareholder_resident_by_id">
					<value>
				<![CDATA[
			      UPDATE Transactions.invoice_shareholder_resident SET payout_state=:stringPayoutState,active=:shareholderActive ,remarks=:remarks ,client_overridden_rate=:clientOverriddenRate,
                  final_total_withholding =:finalDividendWithholding WHERE invoice_id =:id

		          ]]>
					</value>
				</entry>
				<entry
					key="get_invoice_shareholder_non_resident_by_pan_dateOfPosting_year">
					<value>
				<![CDATA[
			      select * from Transactions.invoice_shareholder_non_resident isnr where deductor_master_pan =:deductorPan and is_parent =1 and assessment_year=:year and 
				 date_of_posting =:dateOfPosting
		          ]]>
					</value>
				</entry>
				<entry
					key="get_invoice_shareholder_resident_by_tan_year_document_posting_month">
					<value>
				<![CDATA[
			      select * from Transactions.invoice_shareholder_resident  where deductor_master_tan =:deductorTan and is_parent =1 and assessment_year=:assessmentYear and 
				 document_posting_month in(:month1,:month2,:month3);
		          ]]>
					</value>
				</entry>
				<entry
					key="get_distinct_dateOfPosting_non_resident_invoice_shareolder">
					<value>
				<![CDATA[
			      select DISTINCT date_of_posting from Transactions.invoice_shareholder_non_resident where deductor_master_pan =:pan
		          ]]>
					</value>
				</entry>

				<entry key="find_resident_invoice_shareholder_By_Year_Tan_Id">
					<value>
						<![CDATA[ SELECT * FROM Transactions.invoice_shareholder_resident WHERE assessment_year=:year AND deductor_master_pan=:tan AND 
							invoice_id=:id; ]]>
					</value>
				</entry>
				<entry
					key="find_non_resident_invoice_shareholder_By_Year_Tan_Id">
					<value>
						<![CDATA[ SELECT * FROM Transactions.invoice_shareholder_non_resident WHERE assessment_year=:year AND deductor_master_pan=:tan AND 
							invoice_id=:id; ]]>
					</value>
				</entry>
				<entry key="find_ldc_by_tan">
					<value>
						<![CDATA[ SELECT LM.* FROM Client_Masters.ldc_master LM WHERE LM.deductor_master_tan = :deductorMasterTan AND LM.status = 'valid' AND LM.active = 1 ]]>
					</value>
				</entry>
				<entry key="get_ldc_utilized_amount_by_tan">
					<value>
						<![CDATA[ SELECT SUM(amount) - ISNULL(SUM(LM.utilized_amount),0) - ISNULL(SUM(LU.utilized_amount),0) AS remainingBalance,
  									LM.ldc_master_pan , LM.section,  LM.applicable_from, LM.applicable_to FROM Client_Masters.ldc_master LM
									left JOIN Transactions.ldc_utilization LU ON LM.ldc_master_id = LM.ldc_master_id
									WHERE LM.deductor_master_tan = :deductorMasterTan AND LM.status = 'valid' AND LM.active = 1
  									GROUP BY LM.ldc_master_pan, LM.section, LM.applicable_from, LM.applicable_to; ]]>
					</value>
				</entry>
				<entry key="get_resident_invoice_shareholder_by_receipt">
					<value>
				<![CDATA[
			      select isr.name as deducteeName, isr.pan, isr.final_tds_section as finalTDSSection, isr.final_total_withholding as finalTDSAmount, isr.tds_rate as finalTDSRate, 
			       	isr.dividend_amount as amount, isr.date_of_posting as documentPostingDate, isr.country, isr.email_id as email , smr.contact as contactNo, 
			        '' as tin, '' as natureOfRemittance, concat(smr.flat_door_block_no ,' ', smr.area_locality ,' ', smr.road_street_postoffice) as address, isr.withholding_details as ldcCertificateNo
					from Transactions.invoice_shareholder_resident isr inner join Client_Masters.shareholder_master_residential smr on isr.folio_number =smr.folio_no 
					WHERE isr.assessment_year=:assessmentYear AND isr.deductor_master_tan=:deductorTan AND isr.receipt_bsr_code=:bsrCode AND isr.challan_serial_no=:receiptSerailNo AND isr.challan_paid_date=:receiptDate AND 
					isr.active=1 AND isr.challan_paid=:challanPaid ;
		          ]]>
					</value>
				</entry>
				<entry key="get_non_resident_invoice_shareholder_by_receipt">
					<value>
				<![CDATA[
			       select isr.name as deducteeName, isr.pan, isr.final_tds_section as finalTDSSection, isr.final_total_withholding as finalTDSAmount, isr.tds_rate as finalTDSRate, 
			       	isr.dividend_amount as amount, isr.date_of_posting as documentPostingDate, isr.country, isr.email_id as email , smr.contact as contactNo, 
			        isr.tin as tin, '' as natureOfRemittance, concat(smr.flat_door_block_no ,' ', smr.area_locality ,' ', smr.road_street_postoffice) as address,isr.withholding_details  as ldcCertificateNo
					from Transactions.invoice_shareholder_non_resident isr inner join Client_Masters.shareholder_master_non_residential smr on isr.folio_number =smr.folio_no 
					WHERE isr.assessment_year=:assessmentYear AND isr.deductor_master_tan=:deductorTan AND isr.receipt_bsr_code=:bsrCode AND isr.challan_serial_no=:receiptSerailNo AND isr.challan_paid_date=:receiptDate AND 
					isr.active=1 AND isr.challan_paid=:challanPaid ; ;
		          ]]>
					</value>
				</entry>
				<entry key="ldc_utilization_record_by_id">
					<value> 
					<![CDATA[ 
					     	SELECT LM.certificate_number, LM.applicable_from,LM.applicable_to,LM.rate,LM.section,
       						IT.document_number,IT.document_posting_date ,IT.line_item_number,IT.invoice_amount,IT.final_tds_amount,IT.final_tds_rate,
	   						IT.final_tds_section,IT.challan_month,IT.assessment_year,LU.utilized_amount,LM.initial_utilized_amount,
	   						LM.amount as ldc_master_total_amount,LU.ldc_master_utilized_amount AS total_utilized_amount,LU.remaining_amount,LU.consumed_from
						FROM Client_Masters.ldc_master LM 
						INNER JOIN Transactions.ldc_utilization LU ON LM.ldc_master_id = LU.ldc_master_id
						INNER JOIN Transactions.invoice_line_item IT  ON LU.invoice_line_item_id = IT.invoice_line_item_id
						WHERE LM.ldc_master_id= :id and LU.active = 1
						UNION ALL
						SELECT LM.certificate_number, LM.applicable_from,LM.applicable_to,LM.rate,LM.section,
							   P.document_number,P.posting_date_of_document ,P.line_item_number,P.provisional_amount,P.final_tds_amount,P.final_tds_rate,
      						   P.final_tds_section,P.challan_month,P.assessment_year,LU.utilized_amount,LM.initial_utilized_amount,
       						   LM.amount as ldc_master_total_amount,
	 						  LU.ldc_master_utilized_amount AS total_utilized_amount,LU.remaining_amount,LU.consumed_from
						FROM Client_Masters.ldc_master LM 
						INNER JOIN Transactions.ldc_utilization LU ON LM.ldc_master_id = LU.ldc_master_id
						INNER JOIN Transactions.provision P  ON LU.provision_id = P.provision_id
						WHERE LM.ldc_master_id= :id and LU.active = 1 
						UNION ALL
							SELECT LM.certificate_number, LM.applicable_from,LM.applicable_to,LM.rate,LM.section,
	   						A.document_number,A.posting_date_of_document ,A.line_item_number,A.amount,A.final_tds_amount,A.final_tds_rate,
      						 A.final_tds_section,A.challan_month,A.assessment_year,LU.utilized_amount,LM.initial_utilized_amount,
       						LM.amount as ldc_master_total_amount,
	   						LU.ldc_master_utilized_amount AS total_utilized_amount,LU.remaining_amount,LU.consumed_from
						FROM Client_Masters.ldc_master LM 
						INNER JOIN Transactions.ldc_utilization LU ON LM.ldc_master_id = LU.ldc_master_id
						INNER JOIN Transactions.advance A  ON LU.advance_id = A.advance_id
						WHERE LM.ldc_master_id= :id and LU.active = 1 
						ORDER BY document_posting_date  
					 ]]>
					</value>
				</entry>
				<entry key="get_ldc_dividend_processing">
					<value>
				<![CDATA[
				select isnull(dividend_processing,0) from Client_Masters.ldc_master where ldc_master_id =:id
		          ]]>
					</value>
				</entry>
				<entry key="get_dividend_ldc_adjustments_by_ldc_id">
					<value>
				<![CDATA[
			       SELECT LM.certificate_number, LM.applicable_from,LM.applicable_to,LM.rate,LM.section,
      			 '' AS document_number,IT.date_of_posting AS document_posting_date,'' AS line_item_number,IT.dividend_amount AS invoice_amount,IT.final_total_withholding AS final_tds_amount,IT.client_overridden_rate AS final_tds_rate,
	   				IT.final_tds_section,IT.challan_month,IT.assessment_year,LU.utilized_amount,LM.initial_utilized_amount,
	  				 LM.amount as ldc_master_total_amount,LU.ldc_master_utilized_amount AS total_utilized_amount,LU.remaining_amount,LU.consumed_from
					FROM Client_Masters.ldc_master LM 
					INNER JOIN Transactions.ldc_utilization LU ON LM.ldc_master_id = LU.ldc_master_id
					INNER JOIN Transactions.invoice_shareholder_resident  IT  ON LU.ldc_master_id = IT.ldc_master_id 
					WHERE LM.ldc_master_id= :id and LU.active = 1
					ORDER BY document_posting_date 
		          ]]>
					</value>
				</entry>
				<entry key="get_ao_dividend_processing">
					<value>
				<![CDATA[
				select isnull(dividend_processing,0) from Client_Masters.ao_master  where ao_master_id =:id
		          ]]>
					</value>
				</entry>
				<entry key="ao_utilization_record_by_id">
					<value> 
					<![CDATA[ 
					     	SELECT AM.certificate_number, AM.applicable_from,AM.applicable_to,AM.rate,AM.section,
       						IT.document_number,IT.document_posting_date ,IT.line_item_number,IT.invoice_amount,IT.final_tds_amount,IT.final_tds_rate,
	   						IT.final_tds_section,IT.challan_month,IT.assessment_year,AU.utilized_amount,AM.limit_utilised ,
	   						AM.amount as ao_master_total_amount,AU.ao_master_utilized_amount  AS total_utilized_amount,AU.remaining_amount ,AU.consumed_from 
						FROM Client_Masters.ao_master  AM 
						INNER JOIN Transactions.ao_utilization AU ON AM.ao_master_id = AU.ao_master_id 
						INNER JOIN Transactions.invoice_line_item IT  ON AU.invoice_line_item_id = IT.invoice_line_item_id
						WHERE AM.ao_master_id= :id and AU.active = 1
						UNION ALL
						SELECT AM.certificate_number, AM.applicable_from,AM.applicable_to,AM.rate,AM.section,
							   P.document_number,P.posting_date_of_document ,P.line_item_number,P.provisional_amount,P.final_tds_amount,P.final_tds_rate,
      						   P.final_tds_section,P.challan_month,P.assessment_year,AU.utilized_amount,AM.limit_utilised,
       						   AM.amount as ao_master_total_amount,AU.ao_master_utilized_amount  AS total_utilized_amount,AU.remaining_amount ,AU.consumed_from 
						FROM Client_Masters.ao_master AM 
						INNER JOIN Transactions.ao_utilization AU ON AM.ao_master_id = AU.ao_master_id
						INNER JOIN Transactions.provision P  ON AU.provision_id = P.provision_id
						WHERE AM.ao_master_id= :id and AU.active = 1 
						UNION ALL
							SELECT AM.certificate_number, AM.applicable_from,AM.applicable_to,AM.rate,AM.section,
	   						A.document_number,A.posting_date_of_document ,A.line_item_number,A.amount,A.final_tds_amount,A.final_tds_rate,
      						 A.final_tds_section,A.challan_month,A.assessment_year,AU.utilized_amount,AM.limit_utilised,
       						AM.amount as ao_master_total_amount,AU.ao_master_utilized_amount  AS total_utilized_amount,AU.remaining_amount ,AU.consumed_from 
						FROM Client_Masters.ao_master AM 
						INNER JOIN Transactions.ao_utilization AU ON AM.ao_master_id = AU.ao_master_id
						INNER JOIN Transactions.advance A  ON AU.advance_id = A.advance_id
						WHERE AM.ao_master_id= :id and AU.active = 1 
						ORDER BY document_posting_date   
					 ]]>
					</value>
				</entry>
				<entry key="get_dividend_ao_adjustments_by_ao_id">
					<value>
				<![CDATA[
			       SELECT AM.certificate_number, AM.applicable_from,AM.applicable_to,AM.rate,AM.section,
      			 '' AS document_number,IT.date_of_posting AS document_posting_date,'' AS line_item_number,IT.dividend_amount AS invoice_amount,IT.final_total_withholding AS final_tds_amount,IT.client_overridden_rate AS final_tds_rate,
	   				IT.final_tds_section,IT.challan_month,IT.assessment_year,AU.utilized_amount,AM.limit_utilised ,
	  				 AM.amount as ao_master_total_amount,AU.ao_master_utilized_amount AS total_utilized_amount,AU.remaining_amount,AU.consumed_from
					FROM Client_Masters.ao_master AM 
					INNER JOIN Transactions.ao_utilization  AU ON AM.ao_master_id  = AU.ao_master_id
					INNER JOIN Transactions.invoice_shareholder_non_resident  IT  ON AU.ao_master_id  = IT.ao_master_id 
					WHERE AM.ao_master_id= :id and AU.active = 1
					ORDER BY document_posting_date 
		          ]]>
					</value>
				</entry>
				
				<entry key="get_invoice_based_on_batchid">
					<value>
					<![CDATA[ SELECT * FROM Transactions.invoice_line_item WHERE batch_upload_id = :batchId and assessment_year = :year
                              and deductor_master_tan = :tan ;]]>
					</value>
				</entry>
				<entry key="get_invoice_challan_months_by_batchid">
					<value>
					<![CDATA[ SELECT distinct challan_month FROM Transactions.invoice_line_item WHERE batch_upload_id = :batchId 
                              and deductor_master_tan = :tan ;]]>
					</value>
				</entry>
				<entry key="delete_by_batch_id">
					<value>
						<![CDATA[ DELETE FROM Transactions.invoice_line_item where batch_upload_id = :batchId AND deductor_master_tan = :tan AND
									assessment_year = :year
							]]>
					</value>
				</entry>
				
				<entry key="delete_nr_transactions_meta_by_batch_id">
					<value>
						<![CDATA[ DELETE FROM Transactions.nr_transactions_meta where batch_upload_id = :batchId AND deductor_master_tan = :tan
							]]>
					</value>
				</entry>
				
				<entry key="get_provision_based_on_batchid">
					<value>
					<![CDATA[ SELECT * FROM Transactions.provision WHERE batch_upload_id = :batchId and assessment_year = :year
                              and deductor_master_tan = :tan ;]]>
					</value>
				</entry>
				<entry key="get_provision_challan_months_by_batchid">
					<value>
					<![CDATA[ SELECT distinct challan_month FROM Transactions.provision WHERE batch_upload_id = :batchId 
                              and deductor_master_tan = :tan ;]]>
					</value>
				</entry>
				<entry key="delete_provision_by_batch_id">
					<value>
						<![CDATA[ DELETE FROM Transactions.provision where batch_upload_id = :batchId AND deductor_master_tan = :tan AND
									assessment_year = :year
							]]>
					</value>
				</entry>
				<entry key="get_advance_based_on_batchid">
					<value>
					<![CDATA[ SELECT * FROM Transactions.advance WHERE batch_upload_id = :batchId and assessment_year = :year
                              and deductor_master_tan = :tan ;]]>
					</value>
				</entry>
				<entry key="get_advance_challan_months_by_batchid">
					<value>
					<![CDATA[ SELECT distinct challan_month FROM Transactions.advance WHERE batch_upload_id = :batchId 
                              and deductor_master_tan = :tan ;]]>
					</value>
				</entry>
				<entry key="delete_advance_by_batch_id">
					<value>
						<![CDATA[ DELETE FROM Transactions.advance where batch_upload_id = :batchId AND deductor_master_tan = :tan AND
									assessment_year = :year
							]]>
					</value>
				</entry>

				<entry key="get_invocice_error_records">
					<value>
				<![CDATA[
			   SELECT * FROM Transactions.invoice_line_item ili WHERE assessment_year = :year  
								and batch_upload_id =:batchUploadId  and is_error= 1 
		          ]]>
					</value>
				</entry>
				<entry key="get_provision_error_records">
					<value>
				<![CDATA[
			  SELECT * FROM Transactions.provision  WHERE assessment_year = :year   
								and batch_upload_id =:batchUploadId  and is_error= 1 
		          ]]>
					</value>
				</entry>
				<entry key="get_advance_error_records">
					<value>
				<![CDATA[
			  SELECT * FROM Transactions.advance  WHERE assessment_year = :year  
								and batch_upload_id =:batchUploadId  and is_error= 1  
		          ]]>
					</value>
				</entry>
				<entry key="get_update_mismatch_invoice_data">
					<value>
				<![CDATA[ SELECT * FROM Transactions.invoice_line_item where deductor_master_tan = :tan AND deductor_pan = :deductorPan
							and assessment_year = :year and assessment_month = :month and mismatch_category IN('NAD', 'SMM-RM', 'SMM-RMM','SM-RMM') 
							and active = 1 and has_mismatch = 0 and [action] IN('Modify', 'Accept', 'Reject') 
							]]>
					</value>
				</entry>
				
				<entry key="get_update_mismatch_provision_data">
					<value>
				<![CDATA[ SELECT * FROM Transactions.provision p where deductor_master_tan = :tan AND deductor_pan = :deductorPan
							and assessment_year = :year and assessment_month = :month and mismatch_category IN('NAD', 'SMM-RM', 'SMM-RMM', 'SM-RMM') and 
							active = 1 and mismatch = 0 and [action] IN('Modify', 'Accept', 'Reject') 
				]]>
					</value>
				</entry>
				
				<entry key="get_update_mismatch_advance_data">
					<value>
				<![CDATA[ SELECT * FROM Transactions.advance a where deductor_master_tan = :tan AND deductor_pan = :deductorPan
							and assessment_year = :year and assessment_month = :month and mismatch_category IN('NAD', 'SMM-RM', 'SMM-RMM', 'SM-RMM') and 
							active = 1 and mismatch = 0 and [action] IN('Modify', 'Accept', 'Reject') 
				]]>
					</value>
				</entry>
				<entry key="find_by_tan_invoiceIds">
					<value>
						<![CDATA[ SELECT * FROM Transactions.invoice_line_item WHERE deductor_master_tan= :tan AND deductor_pan = :deductorPan AND
		     					 invoice_line_item_id in (:lineItemIds) ; ]]>
					</value>
				</entry>
				
				<entry key="get_provision_by_provisinIds">
					<value>
						<![CDATA[ SELECT * FROM Transactions.provision WHERE deductor_master_tan= :tan AND deductor_pan = :deductorPan AND
		     					 provision_id in (:provisionIds) ; ]]>
					</value>
				</entry>
				
				<entry key="get_advance_by_advanceIds">
					<value>
						<![CDATA[ SELECT * FROM Transactions.advance WHERE deductor_master_tan= :tan AND deductor_pan = :deductorPan AND
		     					 advance_id in (:advanceIds) ; ]]>
					</value>
				</entry>
				<entry key="resident_find_All_By_Pan_And_Year_and_isParent">
					<value>
						<![CDATA[select  sd.rate_type as remarks,sd.specified_person as email_id ,smr.pan_status as record_type ,isr.* from Transactions.invoice_shareholder_resident isr 
							INNER join Onboarding.shareholder_declaration sd  on isr.shareholder_id =sd.shareholder_id  
							inner join Client_Masters.shareholder_master_residential smr on isr.shareholder_id=smr.shareholder_master_id 
							where isr.assessment_year =:assessmentYear and isr.deductor_master_pan =:deductorPan and isr.is_parent =1 AND sd.deductor_pan=:deductorPan   and sd.active=1 ]]>
					</value>
				</entry>
				<entry key="resident_find_All_By_Pan_And_Year_and_isParent_processed">
					<value>
						<![CDATA[select sd.rate_type as remarks,sd.specified_person as email_id ,isr.* from Transactions.invoice_shareholder_resident isr inner join Onboarding.shareholder_declaration sd  
                               on isr.shareholder_id =sd.shareholder_id where isr.assessment_year =:assessmentYear and isr.deductor_master_pan =:deductorPan and isr.is_parent =1 and isr.payout_state ='APPROVED'
                         ; ]]>
					</value>
				</entry>
				<entry key="resident_find_By_Transaction_Count_Pan_FolioNo">
					<value>
						<![CDATA[select * from Transactions.invoice_shareholder_resident  where transaction_count =:transactionCount and deductor_master_pan =:deductorPan  
                         and folio_number =:folioNumber and  is_parent =1;
						]]>
					</value>
				</entry>
				<entry key="non_resident_find_All_By_Pan_And_Year_and_isParent">
					<value>
						<![CDATA[ select * from Transactions.invoice_shareholder_non_resident  where assessment_year =:assessmentYear and deductor_master_pan =:deductorPan and is_parent =1 ; ]]>
					</value>
				</entry>
				<entry key="non_resident_find_All_By_Pan_And_Year_and_isParent_processed">
					<value>
						<![CDATA[ select * from Transactions.invoice_shareholder_non_resident  where assessment_year =:assessmentYear and deductor_master_pan =:deductorPan and is_parent =1 and payout_state='APPROVED' ; ]]>
					</value>
				</entry>
				<entry key="non_resident_find_By_Transaction_Count_Pan_FolioNo">
					<value>
						<![CDATA[select * from Transactions.invoice_shareholder_non_resident  where transaction_count =:transactionCount and deductor_master_pan =:deductorPan  
                         and folio_number =:folioNumber and  is_parent =1;
						]]>
					</value>
				</entry>
				<entry key="get_all_advance_po_data">
					<value>
						<![CDATA[ SELECT A. * FROM Onboarding.deductor_onboarding_info DOI INNER JOIN Transactions.advance A ON DOI.pan = A.deductor_pan AND DOI.active = 1 AND advance_processing = 'HYBRID'
								LEFT JOIN (SELECT AU.advance_master_id,ISNULL(SUM(AU.utilized_amount),0) AS utilized_amount FROM Transactions.advance_utilization AU 
 								WHERE AU.active = 1 GROUP BY AU.advance_master_id)AU ON A.advance_id = AU.advance_master_id
								WHERE A.deductor_master_tan = :deductorTan AND A.deductor_pan = :deductorPan AND A.active = 1 AND 
								is_exempted = 0 AND A.is_resident = :isResident AND A.document_type = 'ADV' AND supply_type <> 'CAN' AND (A.amount-ISNULL(AU.utilized_amount,0)) > 0 AND
	  							(A.po_number IS NULL OR A.po_number = '');]]>
					</value>
				</entry>
				
				<entry key="find_invoice_stagging_records">
					<value>
						<![CDATA[ select * from Transactions.invoice_stagging where active = 1 and deductor_tan = :tan 
									and assessment_year=:year and challan_month =:month ; ]]>
					</value>
				</entry>
				
				<entry key="find_advance_stagging_records">
					<value>
						<![CDATA[ select * from Transactions.advance_stagging where active = 1 and deductor_tan = :tan 
									and assessment_year=:year and challan_month =:month; ]]>
					</value>
				</entry>
				
			</map>
		</constructor-arg>
	</bean>
</beans>